
pid_temp_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003638  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002094  080036f0  080036f0  000136f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005784  08005784  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005784  08005784  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005784  08005784  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005784  08005784  00015784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005788  08005788  00015788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800578c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  08005798  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08005798  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec09  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002024  00000000  00000000  0002ec3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00030c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  00031ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ab4  00000000  00000000  000329e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116b9  00000000  00000000  00048494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cffc  00000000  00000000  00059b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6b49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037b0  00000000  00000000  000e6b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080036d8 	.word	0x080036d8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080036d8 	.word	0x080036d8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fba5 	bl	800096c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f821 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f9f3 	bl	8000610 <MX_GPIO_Init>
  MX_ADC1_Init();
 800022a:	f000 f877 	bl	800031c <MX_ADC1_Init>
  MX_I2C1_Init();
 800022e:	f000 f8e3 	bl	80003f8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000232:	f000 f921 	bl	8000478 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  uint16_t thermistor_adc = 0;
 8000236:	1dbb      	adds	r3, r7, #6
 8000238:	2200      	movs	r2, #0
 800023a:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	thermistor_adc = HAL_ADC_GetValue(&hadc1);
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <main+0x44>)
 800023e:	0018      	movs	r0, r3
 8000240:	f000 ff34 	bl	80010ac <HAL_ADC_GetValue>
 8000244:	0002      	movs	r2, r0
 8000246:	1dbb      	adds	r3, r7, #6
 8000248:	801a      	strh	r2, [r3, #0]
	current_temperature = thermistor_value_lookup[thermistor_adc];
 800024a:	1dbb      	adds	r3, r7, #6
 800024c:	881a      	ldrh	r2, [r3, #0]
 800024e:	4b04      	ldr	r3, [pc, #16]	; (8000260 <main+0x48>)
 8000250:	0052      	lsls	r2, r2, #1
 8000252:	5ad2      	ldrh	r2, [r2, r3]
 8000254:	4b03      	ldr	r3, [pc, #12]	; (8000264 <main+0x4c>)
 8000256:	801a      	strh	r2, [r3, #0]
	thermistor_adc = HAL_ADC_GetValue(&hadc1);
 8000258:	e7f0      	b.n	800023c <main+0x24>
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	20000028 	.word	0x20000028
 8000260:	080036f0 	.word	0x080036f0
 8000264:	2000012c 	.word	0x2000012c

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b590      	push	{r4, r7, lr}
 800026a:	b093      	sub	sp, #76	; 0x4c
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	2414      	movs	r4, #20
 8000270:	193b      	adds	r3, r7, r4
 8000272:	0018      	movs	r0, r3
 8000274:	2334      	movs	r3, #52	; 0x34
 8000276:	001a      	movs	r2, r3
 8000278:	2100      	movs	r1, #0
 800027a:	f003 fa25 	bl	80036c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	0018      	movs	r0, r3
 8000282:	2310      	movs	r3, #16
 8000284:	001a      	movs	r2, r3
 8000286:	2100      	movs	r1, #0
 8000288:	f003 fa1e 	bl	80036c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	0018      	movs	r0, r3
 8000292:	f001 fcbb 	bl	8001c0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000296:	193b      	adds	r3, r7, r4
 8000298:	2202      	movs	r2, #2
 800029a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029c:	193b      	adds	r3, r7, r4
 800029e:	2280      	movs	r2, #128	; 0x80
 80002a0:	0052      	lsls	r2, r2, #1
 80002a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002a4:	0021      	movs	r1, r4
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2200      	movs	r2, #0
 80002aa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2240      	movs	r2, #64	; 0x40
 80002b0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2202      	movs	r2, #2
 80002b6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2202      	movs	r2, #2
 80002bc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2200      	movs	r2, #0
 80002c2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2208      	movs	r2, #8
 80002c8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2280      	movs	r2, #128	; 0x80
 80002ce:	0292      	lsls	r2, r2, #10
 80002d0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2280      	movs	r2, #128	; 0x80
 80002d6:	0592      	lsls	r2, r2, #22
 80002d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	0018      	movs	r0, r3
 80002de:	f001 fcd5 	bl	8001c8c <HAL_RCC_OscConfig>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002e6:	f000 f9cd 	bl	8000684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2207      	movs	r2, #7
 80002ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2202      	movs	r2, #2
 80002f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2102      	movs	r1, #2
 8000306:	0018      	movs	r0, r3
 8000308:	f001 ffd0 	bl	80022ac <HAL_RCC_ClockConfig>
 800030c:	1e03      	subs	r3, r0, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000310:	f000 f9b8 	bl	8000684 <Error_Handler>
  }
}
 8000314:	46c0      	nop			; (mov r8, r8)
 8000316:	46bd      	mov	sp, r7
 8000318:	b013      	add	sp, #76	; 0x4c
 800031a:	bd90      	pop	{r4, r7, pc}

0800031c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	0018      	movs	r0, r3
 8000326:	230c      	movs	r3, #12
 8000328:	001a      	movs	r2, r3
 800032a:	2100      	movs	r1, #0
 800032c:	f003 f9cc 	bl	80036c8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000330:	4b2f      	ldr	r3, [pc, #188]	; (80003f0 <MX_ADC1_Init+0xd4>)
 8000332:	4a30      	ldr	r2, [pc, #192]	; (80003f4 <MX_ADC1_Init+0xd8>)
 8000334:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000336:	4b2e      	ldr	r3, [pc, #184]	; (80003f0 <MX_ADC1_Init+0xd4>)
 8000338:	2280      	movs	r2, #128	; 0x80
 800033a:	05d2      	lsls	r2, r2, #23
 800033c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800033e:	4b2c      	ldr	r3, [pc, #176]	; (80003f0 <MX_ADC1_Init+0xd4>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000344:	4b2a      	ldr	r3, [pc, #168]	; (80003f0 <MX_ADC1_Init+0xd4>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800034a:	4b29      	ldr	r3, [pc, #164]	; (80003f0 <MX_ADC1_Init+0xd4>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000350:	4b27      	ldr	r3, [pc, #156]	; (80003f0 <MX_ADC1_Init+0xd4>)
 8000352:	2204      	movs	r2, #4
 8000354:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000356:	4b26      	ldr	r3, [pc, #152]	; (80003f0 <MX_ADC1_Init+0xd4>)
 8000358:	2200      	movs	r2, #0
 800035a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800035c:	4b24      	ldr	r3, [pc, #144]	; (80003f0 <MX_ADC1_Init+0xd4>)
 800035e:	2200      	movs	r2, #0
 8000360:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000362:	4b23      	ldr	r3, [pc, #140]	; (80003f0 <MX_ADC1_Init+0xd4>)
 8000364:	2200      	movs	r2, #0
 8000366:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000368:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <MX_ADC1_Init+0xd4>)
 800036a:	2201      	movs	r2, #1
 800036c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800036e:	4b20      	ldr	r3, [pc, #128]	; (80003f0 <MX_ADC1_Init+0xd4>)
 8000370:	2220      	movs	r2, #32
 8000372:	2101      	movs	r1, #1
 8000374:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000376:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <MX_ADC1_Init+0xd4>)
 8000378:	2200      	movs	r2, #0
 800037a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800037c:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <MX_ADC1_Init+0xd4>)
 800037e:	2200      	movs	r2, #0
 8000380:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000382:	4b1b      	ldr	r3, [pc, #108]	; (80003f0 <MX_ADC1_Init+0xd4>)
 8000384:	222c      	movs	r2, #44	; 0x2c
 8000386:	2100      	movs	r1, #0
 8000388:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800038a:	4b19      	ldr	r3, [pc, #100]	; (80003f0 <MX_ADC1_Init+0xd4>)
 800038c:	2200      	movs	r2, #0
 800038e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000390:	4b17      	ldr	r3, [pc, #92]	; (80003f0 <MX_ADC1_Init+0xd4>)
 8000392:	2200      	movs	r2, #0
 8000394:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000396:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <MX_ADC1_Init+0xd4>)
 8000398:	2200      	movs	r2, #0
 800039a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800039c:	4b14      	ldr	r3, [pc, #80]	; (80003f0 <MX_ADC1_Init+0xd4>)
 800039e:	223c      	movs	r2, #60	; 0x3c
 80003a0:	2100      	movs	r1, #0
 80003a2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80003a4:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <MX_ADC1_Init+0xd4>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003aa:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <MX_ADC1_Init+0xd4>)
 80003ac:	0018      	movs	r0, r3
 80003ae:	f000 fc87 	bl	8000cc0 <HAL_ADC_Init>
 80003b2:	1e03      	subs	r3, r0, #0
 80003b4:	d001      	beq.n	80003ba <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80003b6:	f000 f965 	bl	8000684 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2201      	movs	r2, #1
 80003be:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2200      	movs	r2, #0
 80003c4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003cc:	1d3a      	adds	r2, r7, #4
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <MX_ADC1_Init+0xd4>)
 80003d0:	0011      	movs	r1, r2
 80003d2:	0018      	movs	r0, r3
 80003d4:	f000 fe76 	bl	80010c4 <HAL_ADC_ConfigChannel>
 80003d8:	1e03      	subs	r3, r0, #0
 80003da:	d001      	beq.n	80003e0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80003dc:	f000 f952 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADC_Start(&hadc1);
 80003e0:	4b03      	ldr	r3, [pc, #12]	; (80003f0 <MX_ADC1_Init+0xd4>)
 80003e2:	0018      	movs	r0, r3
 80003e4:	f000 fe14 	bl	8001010 <HAL_ADC_Start>
  /* USER CODE END ADC1_Init 2 */

}
 80003e8:	46c0      	nop			; (mov r8, r8)
 80003ea:	46bd      	mov	sp, r7
 80003ec:	b004      	add	sp, #16
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000028 	.word	0x20000028
 80003f4:	40012400 	.word	0x40012400

080003f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <MX_I2C1_Init+0x74>)
 80003fe:	4a1c      	ldr	r2, [pc, #112]	; (8000470 <MX_I2C1_Init+0x78>)
 8000400:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000402:	4b1a      	ldr	r3, [pc, #104]	; (800046c <MX_I2C1_Init+0x74>)
 8000404:	4a1b      	ldr	r2, [pc, #108]	; (8000474 <MX_I2C1_Init+0x7c>)
 8000406:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <MX_I2C1_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800040e:	4b17      	ldr	r3, [pc, #92]	; (800046c <MX_I2C1_Init+0x74>)
 8000410:	2201      	movs	r2, #1
 8000412:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000414:	4b15      	ldr	r3, [pc, #84]	; (800046c <MX_I2C1_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800041a:	4b14      	ldr	r3, [pc, #80]	; (800046c <MX_I2C1_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000420:	4b12      	ldr	r3, [pc, #72]	; (800046c <MX_I2C1_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000426:	4b11      	ldr	r3, [pc, #68]	; (800046c <MX_I2C1_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_I2C1_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_I2C1_Init+0x74>)
 8000434:	0018      	movs	r0, r3
 8000436:	f001 fabb 	bl	80019b0 <HAL_I2C_Init>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800043e:	f000 f921 	bl	8000684 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000442:	4b0a      	ldr	r3, [pc, #40]	; (800046c <MX_I2C1_Init+0x74>)
 8000444:	2100      	movs	r1, #0
 8000446:	0018      	movs	r0, r3
 8000448:	f001 fb48 	bl	8001adc <HAL_I2CEx_ConfigAnalogFilter>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d001      	beq.n	8000454 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000450:	f000 f918 	bl	8000684 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <MX_I2C1_Init+0x74>)
 8000456:	2100      	movs	r1, #0
 8000458:	0018      	movs	r0, r3
 800045a:	f001 fb8b 	bl	8001b74 <HAL_I2CEx_ConfigDigitalFilter>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000462:	f000 f90f 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	2000008c 	.word	0x2000008c
 8000470:	40005400 	.word	0x40005400
 8000474:	10707dbc 	.word	0x10707dbc

08000478 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b09c      	sub	sp, #112	; 0x70
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800047e:	2360      	movs	r3, #96	; 0x60
 8000480:	18fb      	adds	r3, r7, r3
 8000482:	0018      	movs	r0, r3
 8000484:	2310      	movs	r3, #16
 8000486:	001a      	movs	r2, r3
 8000488:	2100      	movs	r1, #0
 800048a:	f003 f91d 	bl	80036c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800048e:	2354      	movs	r3, #84	; 0x54
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	0018      	movs	r0, r3
 8000494:	230c      	movs	r3, #12
 8000496:	001a      	movs	r2, r3
 8000498:	2100      	movs	r1, #0
 800049a:	f003 f915 	bl	80036c8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800049e:	2338      	movs	r3, #56	; 0x38
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	0018      	movs	r0, r3
 80004a4:	231c      	movs	r3, #28
 80004a6:	001a      	movs	r2, r3
 80004a8:	2100      	movs	r1, #0
 80004aa:	f003 f90d 	bl	80036c8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	0018      	movs	r0, r3
 80004b2:	2334      	movs	r3, #52	; 0x34
 80004b4:	001a      	movs	r2, r3
 80004b6:	2100      	movs	r1, #0
 80004b8:	f003 f906 	bl	80036c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004bc:	4b51      	ldr	r3, [pc, #324]	; (8000604 <MX_TIM1_Init+0x18c>)
 80004be:	4a52      	ldr	r2, [pc, #328]	; (8000608 <MX_TIM1_Init+0x190>)
 80004c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004c2:	4b50      	ldr	r3, [pc, #320]	; (8000604 <MX_TIM1_Init+0x18c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c8:	4b4e      	ldr	r3, [pc, #312]	; (8000604 <MX_TIM1_Init+0x18c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004ce:	4b4d      	ldr	r3, [pc, #308]	; (8000604 <MX_TIM1_Init+0x18c>)
 80004d0:	4a4e      	ldr	r2, [pc, #312]	; (800060c <MX_TIM1_Init+0x194>)
 80004d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d4:	4b4b      	ldr	r3, [pc, #300]	; (8000604 <MX_TIM1_Init+0x18c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004da:	4b4a      	ldr	r3, [pc, #296]	; (8000604 <MX_TIM1_Init+0x18c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e0:	4b48      	ldr	r3, [pc, #288]	; (8000604 <MX_TIM1_Init+0x18c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004e6:	4b47      	ldr	r3, [pc, #284]	; (8000604 <MX_TIM1_Init+0x18c>)
 80004e8:	0018      	movs	r0, r3
 80004ea:	f002 f98f 	bl	800280c <HAL_TIM_Base_Init>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d001      	beq.n	80004f6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80004f2:	f000 f8c7 	bl	8000684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004f6:	2160      	movs	r1, #96	; 0x60
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	0152      	lsls	r2, r2, #5
 80004fe:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000500:	187a      	adds	r2, r7, r1
 8000502:	4b40      	ldr	r3, [pc, #256]	; (8000604 <MX_TIM1_Init+0x18c>)
 8000504:	0011      	movs	r1, r2
 8000506:	0018      	movs	r0, r3
 8000508:	f002 fb38 	bl	8002b7c <HAL_TIM_ConfigClockSource>
 800050c:	1e03      	subs	r3, r0, #0
 800050e:	d001      	beq.n	8000514 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000510:	f000 f8b8 	bl	8000684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000514:	4b3b      	ldr	r3, [pc, #236]	; (8000604 <MX_TIM1_Init+0x18c>)
 8000516:	0018      	movs	r0, r3
 8000518:	f002 f9d0 	bl	80028bc <HAL_TIM_PWM_Init>
 800051c:	1e03      	subs	r3, r0, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000520:	f000 f8b0 	bl	8000684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000524:	2154      	movs	r1, #84	; 0x54
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2200      	movs	r2, #0
 8000530:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000538:	187a      	adds	r2, r7, r1
 800053a:	4b32      	ldr	r3, [pc, #200]	; (8000604 <MX_TIM1_Init+0x18c>)
 800053c:	0011      	movs	r1, r2
 800053e:	0018      	movs	r0, r3
 8000540:	f002 ff96 	bl	8003470 <HAL_TIMEx_MasterConfigSynchronization>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d001      	beq.n	800054c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000548:	f000 f89c 	bl	8000684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800054c:	2138      	movs	r1, #56	; 0x38
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2260      	movs	r2, #96	; 0x60
 8000552:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2200      	movs	r2, #0
 8000558:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2200      	movs	r2, #0
 8000570:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2200      	movs	r2, #0
 8000576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000578:	1879      	adds	r1, r7, r1
 800057a:	4b22      	ldr	r3, [pc, #136]	; (8000604 <MX_TIM1_Init+0x18c>)
 800057c:	2200      	movs	r2, #0
 800057e:	0018      	movs	r0, r3
 8000580:	f002 f9fc 	bl	800297c <HAL_TIM_PWM_ConfigChannel>
 8000584:	1e03      	subs	r3, r0, #0
 8000586:	d001      	beq.n	800058c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000588:	f000 f87c 	bl	8000684 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2280      	movs	r2, #128	; 0x80
 80005ae:	0192      	lsls	r2, r2, #6
 80005b0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2200      	movs	r2, #0
 80005c2:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2280      	movs	r2, #128	; 0x80
 80005c8:	0492      	lsls	r2, r2, #18
 80005ca:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2200      	movs	r2, #0
 80005d0:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2200      	movs	r2, #0
 80005d6:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005de:	1d3a      	adds	r2, r7, #4
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <MX_TIM1_Init+0x18c>)
 80005e2:	0011      	movs	r1, r2
 80005e4:	0018      	movs	r0, r3
 80005e6:	f002 ffa5 	bl	8003534 <HAL_TIMEx_ConfigBreakDeadTime>
 80005ea:	1e03      	subs	r3, r0, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80005ee:	f000 f849 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005f2:	4b04      	ldr	r3, [pc, #16]	; (8000604 <MX_TIM1_Init+0x18c>)
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 f935 	bl	8000864 <HAL_TIM_MspPostInit>

}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b01c      	add	sp, #112	; 0x70
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	200000e0 	.word	0x200000e0
 8000608:	40012c00 	.word	0x40012c00
 800060c:	0000ffff 	.word	0x0000ffff

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b089      	sub	sp, #36	; 0x24
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	240c      	movs	r4, #12
 8000618:	193b      	adds	r3, r7, r4
 800061a:	0018      	movs	r0, r3
 800061c:	2314      	movs	r3, #20
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f003 f851 	bl	80036c8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <MX_GPIO_Init+0x70>)
 8000628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_GPIO_Init+0x70>)
 800062c:	2102      	movs	r1, #2
 800062e:	430a      	orrs	r2, r1
 8000630:	635a      	str	r2, [r3, #52]	; 0x34
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <MX_GPIO_Init+0x70>)
 8000634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000636:	2202      	movs	r2, #2
 8000638:	4013      	ands	r3, r2
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_GPIO_Init+0x70>)
 8000640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_GPIO_Init+0x70>)
 8000644:	2101      	movs	r1, #1
 8000646:	430a      	orrs	r2, r1
 8000648:	635a      	str	r2, [r3, #52]	; 0x34
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <MX_GPIO_Init+0x70>)
 800064c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800064e:	2201      	movs	r2, #1
 8000650:	4013      	ands	r3, r2
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : BTN_BACK_Pin BTN_MINUS_Pin BTN_PLUS_Pin BTN_OK_Pin */
  GPIO_InitStruct.Pin = BTN_BACK_Pin|BTN_MINUS_Pin|BTN_PLUS_Pin|BTN_OK_Pin;
 8000656:	193b      	adds	r3, r7, r4
 8000658:	22f0      	movs	r2, #240	; 0xf0
 800065a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065c:	193b      	adds	r3, r7, r4
 800065e:	2200      	movs	r2, #0
 8000660:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000662:	193b      	adds	r3, r7, r4
 8000664:	2201      	movs	r2, #1
 8000666:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	193a      	adds	r2, r7, r4
 800066a:	23a0      	movs	r3, #160	; 0xa0
 800066c:	05db      	lsls	r3, r3, #23
 800066e:	0011      	movs	r1, r2
 8000670:	0018      	movs	r0, r3
 8000672:	f001 f839 	bl	80016e8 <HAL_GPIO_Init>

}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b009      	add	sp, #36	; 0x24
 800067c:	bd90      	pop	{r4, r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	40021000 	.word	0x40021000

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068c:	e7fe      	b.n	800068c <Error_Handler+0x8>
	...

08000690 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_MspInit+0x44>)
 8000698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <HAL_MspInit+0x44>)
 800069c:	2101      	movs	r1, #1
 800069e:	430a      	orrs	r2, r1
 80006a0:	641a      	str	r2, [r3, #64]	; 0x40
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <HAL_MspInit+0x44>)
 80006a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a6:	2201      	movs	r2, #1
 80006a8:	4013      	ands	r3, r2
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_MspInit+0x44>)
 80006b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <HAL_MspInit+0x44>)
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	0549      	lsls	r1, r1, #21
 80006b8:	430a      	orrs	r2, r1
 80006ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <HAL_MspInit+0x44>)
 80006be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	055b      	lsls	r3, r3, #21
 80006c4:	4013      	ands	r3, r2
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b002      	add	sp, #8
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	40021000 	.word	0x40021000

080006d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b08b      	sub	sp, #44	; 0x2c
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	2414      	movs	r4, #20
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	0018      	movs	r0, r3
 80006e6:	2314      	movs	r3, #20
 80006e8:	001a      	movs	r2, r3
 80006ea:	2100      	movs	r1, #0
 80006ec:	f002 ffec 	bl	80036c8 <memset>
  if(hadc->Instance==ADC1)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a18      	ldr	r2, [pc, #96]	; (8000758 <HAL_ADC_MspInit+0x80>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d129      	bne.n	800074e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <HAL_ADC_MspInit+0x84>)
 80006fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <HAL_ADC_MspInit+0x84>)
 8000700:	2180      	movs	r1, #128	; 0x80
 8000702:	0349      	lsls	r1, r1, #13
 8000704:	430a      	orrs	r2, r1
 8000706:	641a      	str	r2, [r3, #64]	; 0x40
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <HAL_ADC_MspInit+0x84>)
 800070a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	035b      	lsls	r3, r3, #13
 8000710:	4013      	ands	r3, r2
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <HAL_ADC_MspInit+0x84>)
 8000718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <HAL_ADC_MspInit+0x84>)
 800071c:	2101      	movs	r1, #1
 800071e:	430a      	orrs	r2, r1
 8000720:	635a      	str	r2, [r3, #52]	; 0x34
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <HAL_ADC_MspInit+0x84>)
 8000724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000726:	2201      	movs	r2, #1
 8000728:	4013      	ands	r3, r2
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2201      	movs	r2, #1
 8000732:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2203      	movs	r2, #3
 8000738:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	193a      	adds	r2, r7, r4
 8000742:	23a0      	movs	r3, #160	; 0xa0
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f000 ffcd 	bl	80016e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b00b      	add	sp, #44	; 0x2c
 8000754:	bd90      	pop	{r4, r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	40012400 	.word	0x40012400
 800075c:	40021000 	.word	0x40021000

08000760 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b091      	sub	sp, #68	; 0x44
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	232c      	movs	r3, #44	; 0x2c
 800076a:	18fb      	adds	r3, r7, r3
 800076c:	0018      	movs	r0, r3
 800076e:	2314      	movs	r3, #20
 8000770:	001a      	movs	r2, r3
 8000772:	2100      	movs	r1, #0
 8000774:	f002 ffa8 	bl	80036c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000778:	2414      	movs	r4, #20
 800077a:	193b      	adds	r3, r7, r4
 800077c:	0018      	movs	r0, r3
 800077e:	2318      	movs	r3, #24
 8000780:	001a      	movs	r2, r3
 8000782:	2100      	movs	r1, #0
 8000784:	f002 ffa0 	bl	80036c8 <memset>
  if(hi2c->Instance==I2C1)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a22      	ldr	r2, [pc, #136]	; (8000818 <HAL_I2C_MspInit+0xb8>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d13e      	bne.n	8000810 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2220      	movs	r2, #32
 8000796:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 ff0d 	bl	80025c0 <HAL_RCCEx_PeriphCLKConfig>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d001      	beq.n	80007ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80007aa:	f7ff ff6b 	bl	8000684 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4b1b      	ldr	r3, [pc, #108]	; (800081c <HAL_I2C_MspInit+0xbc>)
 80007b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <HAL_I2C_MspInit+0xbc>)
 80007b4:	2102      	movs	r1, #2
 80007b6:	430a      	orrs	r2, r1
 80007b8:	635a      	str	r2, [r3, #52]	; 0x34
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <HAL_I2C_MspInit+0xbc>)
 80007bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007be:	2202      	movs	r2, #2
 80007c0:	4013      	ands	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007c6:	212c      	movs	r1, #44	; 0x2c
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	22c0      	movs	r2, #192	; 0xc0
 80007cc:	0092      	lsls	r2, r2, #2
 80007ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2212      	movs	r2, #18
 80007d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2206      	movs	r2, #6
 80007e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	4a0d      	ldr	r2, [pc, #52]	; (8000820 <HAL_I2C_MspInit+0xc0>)
 80007ec:	0019      	movs	r1, r3
 80007ee:	0010      	movs	r0, r2
 80007f0:	f000 ff7a 	bl	80016e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_I2C_MspInit+0xbc>)
 80007f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_I2C_MspInit+0xbc>)
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	0389      	lsls	r1, r1, #14
 80007fe:	430a      	orrs	r2, r1
 8000800:	63da      	str	r2, [r3, #60]	; 0x3c
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_I2C_MspInit+0xbc>)
 8000804:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000806:	2380      	movs	r3, #128	; 0x80
 8000808:	039b      	lsls	r3, r3, #14
 800080a:	4013      	ands	r3, r2
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	b011      	add	sp, #68	; 0x44
 8000816:	bd90      	pop	{r4, r7, pc}
 8000818:	40005400 	.word	0x40005400
 800081c:	40021000 	.word	0x40021000
 8000820:	50000400 	.word	0x50000400

08000824 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0a      	ldr	r2, [pc, #40]	; (800085c <HAL_TIM_Base_MspInit+0x38>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d10d      	bne.n	8000852 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <HAL_TIM_Base_MspInit+0x3c>)
 8000838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_TIM_Base_MspInit+0x3c>)
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	0109      	lsls	r1, r1, #4
 8000840:	430a      	orrs	r2, r1
 8000842:	641a      	str	r2, [r3, #64]	; 0x40
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_TIM_Base_MspInit+0x3c>)
 8000846:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	011b      	lsls	r3, r3, #4
 800084c:	4013      	ands	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b004      	add	sp, #16
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	40012c00 	.word	0x40012c00
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	240c      	movs	r4, #12
 800086e:	193b      	adds	r3, r7, r4
 8000870:	0018      	movs	r0, r3
 8000872:	2314      	movs	r3, #20
 8000874:	001a      	movs	r2, r3
 8000876:	2100      	movs	r1, #0
 8000878:	f002 ff26 	bl	80036c8 <memset>
  if(htim->Instance==TIM1)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a15      	ldr	r2, [pc, #84]	; (80008d8 <HAL_TIM_MspPostInit+0x74>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d123      	bne.n	80008ce <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_TIM_MspPostInit+0x78>)
 8000888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <HAL_TIM_MspPostInit+0x78>)
 800088c:	2101      	movs	r1, #1
 800088e:	430a      	orrs	r2, r1
 8000890:	635a      	str	r2, [r3, #52]	; 0x34
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_TIM_MspPostInit+0x78>)
 8000894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000896:	2201      	movs	r2, #1
 8000898:	4013      	ands	r3, r2
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	2280      	movs	r2, #128	; 0x80
 80008a2:	0052      	lsls	r2, r2, #1
 80008a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	0021      	movs	r1, r4
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2202      	movs	r2, #2
 80008ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2202      	movs	r2, #2
 80008be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	187a      	adds	r2, r7, r1
 80008c2:	23a0      	movs	r3, #160	; 0xa0
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	0011      	movs	r1, r2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 ff0d 	bl	80016e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b009      	add	sp, #36	; 0x24
 80008d4:	bd90      	pop	{r4, r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	40012c00 	.word	0x40012c00
 80008dc:	40021000 	.word	0x40021000

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 f89c 	bl	8000a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800091a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800091c:	f7ff fff7 	bl	800090e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000920:	480c      	ldr	r0, [pc, #48]	; (8000954 <LoopForever+0x6>)
  ldr r1, =_edata
 8000922:	490d      	ldr	r1, [pc, #52]	; (8000958 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000924:	4a0d      	ldr	r2, [pc, #52]	; (800095c <LoopForever+0xe>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000938:	4c0a      	ldr	r4, [pc, #40]	; (8000964 <LoopForever+0x16>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000946:	f002 fe9b 	bl	8003680 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800094a:	f7ff fc65 	bl	8000218 <main>

0800094e <LoopForever>:

LoopForever:
  b LoopForever
 800094e:	e7fe      	b.n	800094e <LoopForever>
  ldr   r0, =_estack
 8000950:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000958:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800095c:	0800578c 	.word	0x0800578c
  ldr r2, =_sbss
 8000960:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000964:	20000134 	.word	0x20000134

08000968 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC1_IRQHandler>
	...

0800096c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_Init+0x3c>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_Init+0x3c>)
 800097e:	2180      	movs	r1, #128	; 0x80
 8000980:	0049      	lsls	r1, r1, #1
 8000982:	430a      	orrs	r2, r1
 8000984:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000986:	2003      	movs	r0, #3
 8000988:	f000 f810 	bl	80009ac <HAL_InitTick>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d003      	beq.n	8000998 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000990:	1dfb      	adds	r3, r7, #7
 8000992:	2201      	movs	r2, #1
 8000994:	701a      	strb	r2, [r3, #0]
 8000996:	e001      	b.n	800099c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff fe7a 	bl	8000690 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800099c:	1dfb      	adds	r3, r7, #7
 800099e:	781b      	ldrb	r3, [r3, #0]
}
 80009a0:	0018      	movs	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b002      	add	sp, #8
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40022000 	.word	0x40022000

080009ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009b4:	230f      	movs	r3, #15
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <HAL_InitTick+0x88>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d02b      	beq.n	8000a1c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_InitTick+0x8c>)
 80009c6:	681c      	ldr	r4, [r3, #0]
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <HAL_InitTick+0x88>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	0019      	movs	r1, r3
 80009ce:	23fa      	movs	r3, #250	; 0xfa
 80009d0:	0098      	lsls	r0, r3, #2
 80009d2:	f7ff fb95 	bl	8000100 <__udivsi3>
 80009d6:	0003      	movs	r3, r0
 80009d8:	0019      	movs	r1, r3
 80009da:	0020      	movs	r0, r4
 80009dc:	f7ff fb90 	bl	8000100 <__udivsi3>
 80009e0:	0003      	movs	r3, r0
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 fe73 	bl	80016ce <HAL_SYSTICK_Config>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d112      	bne.n	8000a12 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	d80a      	bhi.n	8000a08 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	2301      	movs	r3, #1
 80009f6:	425b      	negs	r3, r3
 80009f8:	2200      	movs	r2, #0
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 fe52 	bl	80016a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_InitTick+0x90>)
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	e00d      	b.n	8000a24 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a08:	230f      	movs	r3, #15
 8000a0a:	18fb      	adds	r3, r7, r3
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e008      	b.n	8000a24 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a12:	230f      	movs	r3, #15
 8000a14:	18fb      	adds	r3, r7, r3
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
 8000a1a:	e003      	b.n	8000a24 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	18fb      	adds	r3, r7, r3
 8000a20:	2201      	movs	r2, #1
 8000a22:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a24:	230f      	movs	r3, #15
 8000a26:	18fb      	adds	r3, r7, r3
 8000a28:	781b      	ldrb	r3, [r3, #0]
}
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b005      	add	sp, #20
 8000a30:	bd90      	pop	{r4, r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	20000004 	.word	0x20000004

08000a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_IncTick+0x1c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	001a      	movs	r2, r3
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_IncTick+0x20>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	18d2      	adds	r2, r2, r3
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <HAL_IncTick+0x20>)
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	20000130 	.word	0x20000130

08000a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b02      	ldr	r3, [pc, #8]	; (8000a74 <HAL_GetTick+0x10>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	20000130 	.word	0x20000130

08000a78 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000a88:	401a      	ands	r2, r3
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	601a      	str	r2, [r3, #0]
}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b002      	add	sp, #8
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	fe3fffff 	.word	0xfe3fffff

08000aa0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	23e0      	movs	r3, #224	; 0xe0
 8000aae:	045b      	lsls	r3, r3, #17
 8000ab0:	4013      	ands	r3, r2
}
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b002      	add	sp, #8
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b084      	sub	sp, #16
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	2104      	movs	r1, #4
 8000ace:	400a      	ands	r2, r1
 8000ad0:	2107      	movs	r1, #7
 8000ad2:	4091      	lsls	r1, r2
 8000ad4:	000a      	movs	r2, r1
 8000ad6:	43d2      	mvns	r2, r2
 8000ad8:	401a      	ands	r2, r3
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	2104      	movs	r1, #4
 8000ade:	400b      	ands	r3, r1
 8000ae0:	6879      	ldr	r1, [r7, #4]
 8000ae2:	4099      	lsls	r1, r3
 8000ae4:	000b      	movs	r3, r1
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b004      	add	sp, #16
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	683a      	ldr	r2, [r7, #0]
 8000b04:	2104      	movs	r1, #4
 8000b06:	400a      	ands	r2, r1
 8000b08:	2107      	movs	r1, #7
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	000a      	movs	r2, r1
 8000b0e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	2104      	movs	r1, #4
 8000b14:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000b16:	40da      	lsrs	r2, r3
 8000b18:	0013      	movs	r3, r2
}
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b002      	add	sp, #8
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b084      	sub	sp, #16
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	60f8      	str	r0, [r7, #12]
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	211f      	movs	r1, #31
 8000b36:	400a      	ands	r2, r1
 8000b38:	210f      	movs	r1, #15
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	000a      	movs	r2, r1
 8000b3e:	43d2      	mvns	r2, r2
 8000b40:	401a      	ands	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	0e9b      	lsrs	r3, r3, #26
 8000b46:	210f      	movs	r1, #15
 8000b48:	4019      	ands	r1, r3
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	201f      	movs	r0, #31
 8000b4e:	4003      	ands	r3, r0
 8000b50:	4099      	lsls	r1, r3
 8000b52:	000b      	movs	r3, r1
 8000b54:	431a      	orrs	r2, r3
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b004      	add	sp, #16
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	035b      	lsls	r3, r3, #13
 8000b74:	0b5b      	lsrs	r3, r3, #13
 8000b76:	431a      	orrs	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b002      	add	sp, #8
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	0352      	lsls	r2, r2, #13
 8000b96:	0b52      	lsrs	r2, r2, #13
 8000b98:	43d2      	mvns	r2, r2
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b002      	add	sp, #8
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	0212      	lsls	r2, r2, #8
 8000bbc:	43d2      	mvns	r2, r2
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	021b      	lsls	r3, r3, #8
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	400b      	ands	r3, r1
 8000bc8:	4904      	ldr	r1, [pc, #16]	; (8000bdc <LL_ADC_SetChannelSamplingTime+0x34>)
 8000bca:	400b      	ands	r3, r1
 8000bcc:	431a      	orrs	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b004      	add	sp, #16
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	07ffff00 	.word	0x07ffff00

08000be0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <LL_ADC_EnableInternalRegulator+0x24>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	0552      	lsls	r2, r2, #21
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	6fffffe8 	.word	0x6fffffe8

08000c08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	055b      	lsls	r3, r3, #21
 8000c18:	401a      	ands	r2, r3
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	055b      	lsls	r3, r3, #21
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d101      	bne.n	8000c26 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000c22:	2301      	movs	r3, #1
 8000c24:	e000      	b.n	8000c28 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	0018      	movs	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b002      	add	sp, #8
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <LL_ADC_Enable+0x20>)
 8000c3e:	4013      	ands	r3, r2
 8000c40:	2201      	movs	r2, #1
 8000c42:	431a      	orrs	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b002      	add	sp, #8
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	7fffffe8 	.word	0x7fffffe8

08000c54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	2201      	movs	r2, #1
 8000c62:	4013      	ands	r3, r2
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d101      	bne.n	8000c6c <LL_ADC_IsEnabled+0x18>
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e000      	b.n	8000c6e <LL_ADC_IsEnabled+0x1a>
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	0018      	movs	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b002      	add	sp, #8
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <LL_ADC_REG_StartConversion+0x20>)
 8000c86:	4013      	ands	r3, r2
 8000c88:	2204      	movs	r2, #4
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b002      	add	sp, #8
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	7fffffe8 	.word	0x7fffffe8

08000c9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	2204      	movs	r2, #4
 8000caa:	4013      	ands	r3, r2
 8000cac:	2b04      	cmp	r3, #4
 8000cae:	d101      	bne.n	8000cb4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e000      	b.n	8000cb6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b002      	add	sp, #8
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cc8:	231f      	movs	r3, #31
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e17f      	b.n	8000fe6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d10a      	bne.n	8000d04 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff fcf1 	bl	80006d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2254      	movs	r2, #84	; 0x54
 8000d00:	2100      	movs	r1, #0
 8000d02:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff ff7d 	bl	8000c08 <LL_ADC_IsInternalRegulatorEnabled>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d115      	bne.n	8000d3e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff ff62 	bl	8000be0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000d1c:	4bb4      	ldr	r3, [pc, #720]	; (8000ff0 <HAL_ADC_Init+0x330>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	49b4      	ldr	r1, [pc, #720]	; (8000ff4 <HAL_ADC_Init+0x334>)
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff f9ec 	bl	8000100 <__udivsi3>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000d30:	e002      	b.n	8000d38 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1f9      	bne.n	8000d32 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	0018      	movs	r0, r3
 8000d44:	f7ff ff60 	bl	8000c08 <LL_ADC_IsInternalRegulatorEnabled>
 8000d48:	1e03      	subs	r3, r0, #0
 8000d4a:	d10f      	bne.n	8000d6c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d50:	2210      	movs	r2, #16
 8000d52:	431a      	orrs	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	431a      	orrs	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000d64:	231f      	movs	r3, #31
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	2201      	movs	r2, #1
 8000d6a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	0018      	movs	r0, r3
 8000d72:	f7ff ff93 	bl	8000c9c <LL_ADC_REG_IsConversionOngoing>
 8000d76:	0003      	movs	r3, r0
 8000d78:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7e:	2210      	movs	r2, #16
 8000d80:	4013      	ands	r3, r2
 8000d82:	d000      	beq.n	8000d86 <HAL_ADC_Init+0xc6>
 8000d84:	e122      	b.n	8000fcc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d000      	beq.n	8000d8e <HAL_ADC_Init+0xce>
 8000d8c:	e11e      	b.n	8000fcc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d92:	4a99      	ldr	r2, [pc, #612]	; (8000ff8 <HAL_ADC_Init+0x338>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	2202      	movs	r2, #2
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff ff56 	bl	8000c54 <LL_ADC_IsEnabled>
 8000da8:	1e03      	subs	r3, r0, #0
 8000daa:	d000      	beq.n	8000dae <HAL_ADC_Init+0xee>
 8000dac:	e0ad      	b.n	8000f0a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7e1b      	ldrb	r3, [r3, #24]
 8000db6:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000db8:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	7e5b      	ldrb	r3, [r3, #25]
 8000dbe:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000dc0:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7e9b      	ldrb	r3, [r3, #26]
 8000dc6:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000dc8:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d002      	beq.n	8000dd8 <HAL_ADC_Init+0x118>
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	015b      	lsls	r3, r3, #5
 8000dd6:	e000      	b.n	8000dda <HAL_ADC_Init+0x11a>
 8000dd8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000dda:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000de0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	691b      	ldr	r3, [r3, #16]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	da04      	bge.n	8000df4 <HAL_ADC_Init+0x134>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	085b      	lsrs	r3, r3, #1
 8000df2:	e001      	b.n	8000df8 <HAL_ADC_Init+0x138>
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000df8:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	212c      	movs	r1, #44	; 0x2c
 8000dfe:	5c5b      	ldrb	r3, [r3, r1]
 8000e00:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000e02:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2220      	movs	r2, #32
 8000e0e:	5c9b      	ldrb	r3, [r3, r2]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d115      	bne.n	8000e40 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7e9b      	ldrb	r3, [r3, #26]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d105      	bne.n	8000e28 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	2280      	movs	r2, #128	; 0x80
 8000e20:	0252      	lsls	r2, r2, #9
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
 8000e26:	e00b      	b.n	8000e40 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2c:	2220      	movs	r2, #32
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e38:	2201      	movs	r2, #1
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d00a      	beq.n	8000e5e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e4c:	23e0      	movs	r3, #224	; 0xe0
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000e56:	4313      	orrs	r3, r2
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	4a65      	ldr	r2, [pc, #404]	; (8000ffc <HAL_ADC_Init+0x33c>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	0019      	movs	r1, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	430a      	orrs	r2, r1
 8000e72:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	0f9b      	lsrs	r3, r3, #30
 8000e7a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000e80:	4313      	orrs	r3, r2
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	223c      	movs	r2, #60	; 0x3c
 8000e8c:	5c9b      	ldrb	r3, [r3, r2]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d111      	bne.n	8000eb6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	0f9b      	lsrs	r3, r3, #30
 8000e98:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000e9e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000ea4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000eaa:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	4a50      	ldr	r2, [pc, #320]	; (8001000 <HAL_ADC_Init+0x340>)
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	0019      	movs	r1, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	23c0      	movs	r3, #192	; 0xc0
 8000ed2:	061b      	lsls	r3, r3, #24
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d018      	beq.n	8000f0a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	05db      	lsls	r3, r3, #23
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d012      	beq.n	8000f0a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	061b      	lsls	r3, r3, #24
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d00c      	beq.n	8000f0a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000ef0:	4b44      	ldr	r3, [pc, #272]	; (8001004 <HAL_ADC_Init+0x344>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a44      	ldr	r2, [pc, #272]	; (8001008 <HAL_ADC_Init+0x348>)
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	0019      	movs	r1, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	23f0      	movs	r3, #240	; 0xf0
 8000f00:	039b      	lsls	r3, r3, #14
 8000f02:	401a      	ands	r2, r3
 8000f04:	4b3f      	ldr	r3, [pc, #252]	; (8001004 <HAL_ADC_Init+0x344>)
 8000f06:	430a      	orrs	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f12:	001a      	movs	r2, r3
 8000f14:	2100      	movs	r1, #0
 8000f16:	f7ff fdd0 	bl	8000aba <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f22:	493a      	ldr	r1, [pc, #232]	; (800100c <HAL_ADC_Init+0x34c>)
 8000f24:	001a      	movs	r2, r3
 8000f26:	f7ff fdc8 	bl	8000aba <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d109      	bne.n	8000f46 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2110      	movs	r1, #16
 8000f3e:	4249      	negs	r1, r1
 8000f40:	430a      	orrs	r2, r1
 8000f42:	629a      	str	r2, [r3, #40]	; 0x28
 8000f44:	e018      	b.n	8000f78 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	691a      	ldr	r2, [r3, #16]
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	039b      	lsls	r3, r3, #14
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d112      	bne.n	8000f78 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69db      	ldr	r3, [r3, #28]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	221c      	movs	r2, #28
 8000f62:	4013      	ands	r3, r2
 8000f64:	2210      	movs	r2, #16
 8000f66:	4252      	negs	r2, r2
 8000f68:	409a      	lsls	r2, r3
 8000f6a:	0011      	movs	r1, r2
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	430a      	orrs	r2, r1
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff fdb8 	bl	8000af4 <LL_ADC_GetSamplingTimeCommonChannels>
 8000f84:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d10b      	bne.n	8000fa6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f98:	2203      	movs	r2, #3
 8000f9a:	4393      	bics	r3, r2
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000fa4:	e01c      	b.n	8000fe0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000faa:	2212      	movs	r2, #18
 8000fac:	4393      	bics	r3, r2
 8000fae:	2210      	movs	r2, #16
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fba:	2201      	movs	r2, #1
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8000fc2:	231f      	movs	r3, #31
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000fca:	e009      	b.n	8000fe0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd0:	2210      	movs	r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000fd8:	231f      	movs	r3, #31
 8000fda:	18fb      	adds	r3, r7, r3
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000fe0:	231f      	movs	r3, #31
 8000fe2:	18fb      	adds	r3, r7, r3
 8000fe4:	781b      	ldrb	r3, [r3, #0]
}
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b008      	add	sp, #32
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	00030d40 	.word	0x00030d40
 8000ff8:	fffffefd 	.word	0xfffffefd
 8000ffc:	fffe0201 	.word	0xfffe0201
 8001000:	1ffffc02 	.word	0x1ffffc02
 8001004:	40012708 	.word	0x40012708
 8001008:	ffc3ffff 	.word	0xffc3ffff
 800100c:	07ffff04 	.word	0x07ffff04

08001010 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	0018      	movs	r0, r3
 800101e:	f7ff fe3d 	bl	8000c9c <LL_ADC_REG_IsConversionOngoing>
 8001022:	1e03      	subs	r3, r0, #0
 8001024:	d135      	bne.n	8001092 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2254      	movs	r2, #84	; 0x54
 800102a:	5c9b      	ldrb	r3, [r3, r2]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d101      	bne.n	8001034 <HAL_ADC_Start+0x24>
 8001030:	2302      	movs	r3, #2
 8001032:	e035      	b.n	80010a0 <HAL_ADC_Start+0x90>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2254      	movs	r2, #84	; 0x54
 8001038:	2101      	movs	r1, #1
 800103a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800103c:	250f      	movs	r5, #15
 800103e:	197c      	adds	r4, r7, r5
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	0018      	movs	r0, r3
 8001044:	f000 fa16 	bl	8001474 <ADC_Enable>
 8001048:	0003      	movs	r3, r0
 800104a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800104c:	197b      	adds	r3, r7, r5
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d119      	bne.n	8001088 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001058:	4a13      	ldr	r2, [pc, #76]	; (80010a8 <HAL_ADC_Start+0x98>)
 800105a:	4013      	ands	r3, r2
 800105c:	2280      	movs	r2, #128	; 0x80
 800105e:	0052      	lsls	r2, r2, #1
 8001060:	431a      	orrs	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	221c      	movs	r2, #28
 8001072:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2254      	movs	r2, #84	; 0x54
 8001078:	2100      	movs	r1, #0
 800107a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff fdf9 	bl	8000c78 <LL_ADC_REG_StartConversion>
 8001086:	e008      	b.n	800109a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2254      	movs	r2, #84	; 0x54
 800108c:	2100      	movs	r1, #0
 800108e:	5499      	strb	r1, [r3, r2]
 8001090:	e003      	b.n	800109a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001092:	230f      	movs	r3, #15
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	2202      	movs	r2, #2
 8001098:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800109a:	230f      	movs	r3, #15
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	781b      	ldrb	r3, [r3, #0]
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b004      	add	sp, #16
 80010a6:	bdb0      	pop	{r4, r5, r7, pc}
 80010a8:	fffff0fe 	.word	0xfffff0fe

080010ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80010ba:	0018      	movs	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	b002      	add	sp, #8
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ce:	2317      	movs	r3, #23
 80010d0:	18fb      	adds	r3, r7, r3
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2254      	movs	r2, #84	; 0x54
 80010de:	5c9b      	ldrb	r3, [r3, r2]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d101      	bne.n	80010e8 <HAL_ADC_ConfigChannel+0x24>
 80010e4:	2302      	movs	r3, #2
 80010e6:	e1c0      	b.n	800146a <HAL_ADC_ConfigChannel+0x3a6>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2254      	movs	r2, #84	; 0x54
 80010ec:	2101      	movs	r1, #1
 80010ee:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	0018      	movs	r0, r3
 80010f6:	f7ff fdd1 	bl	8000c9c <LL_ADC_REG_IsConversionOngoing>
 80010fa:	1e03      	subs	r3, r0, #0
 80010fc:	d000      	beq.n	8001100 <HAL_ADC_ConfigChannel+0x3c>
 80010fe:	e1a3      	b.n	8001448 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d100      	bne.n	800110a <HAL_ADC_ConfigChannel+0x46>
 8001108:	e143      	b.n	8001392 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691a      	ldr	r2, [r3, #16]
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	061b      	lsls	r3, r3, #24
 8001112:	429a      	cmp	r2, r3
 8001114:	d004      	beq.n	8001120 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800111a:	4ac1      	ldr	r2, [pc, #772]	; (8001420 <HAL_ADC_ConfigChannel+0x35c>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d108      	bne.n	8001132 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	0019      	movs	r1, r3
 800112a:	0010      	movs	r0, r2
 800112c:	f7ff fd19 	bl	8000b62 <LL_ADC_REG_SetSequencerChAdd>
 8001130:	e0c9      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	211f      	movs	r1, #31
 800113c:	400b      	ands	r3, r1
 800113e:	210f      	movs	r1, #15
 8001140:	4099      	lsls	r1, r3
 8001142:	000b      	movs	r3, r1
 8001144:	43db      	mvns	r3, r3
 8001146:	4013      	ands	r3, r2
 8001148:	0019      	movs	r1, r3
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	035b      	lsls	r3, r3, #13
 8001150:	0b5b      	lsrs	r3, r3, #13
 8001152:	d105      	bne.n	8001160 <HAL_ADC_ConfigChannel+0x9c>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	0e9b      	lsrs	r3, r3, #26
 800115a:	221f      	movs	r2, #31
 800115c:	4013      	ands	r3, r2
 800115e:	e098      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1ce>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2201      	movs	r2, #1
 8001166:	4013      	ands	r3, r2
 8001168:	d000      	beq.n	800116c <HAL_ADC_ConfigChannel+0xa8>
 800116a:	e091      	b.n	8001290 <HAL_ADC_ConfigChannel+0x1cc>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2202      	movs	r2, #2
 8001172:	4013      	ands	r3, r2
 8001174:	d000      	beq.n	8001178 <HAL_ADC_ConfigChannel+0xb4>
 8001176:	e089      	b.n	800128c <HAL_ADC_ConfigChannel+0x1c8>
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2204      	movs	r2, #4
 800117e:	4013      	ands	r3, r2
 8001180:	d000      	beq.n	8001184 <HAL_ADC_ConfigChannel+0xc0>
 8001182:	e081      	b.n	8001288 <HAL_ADC_ConfigChannel+0x1c4>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2208      	movs	r2, #8
 800118a:	4013      	ands	r3, r2
 800118c:	d000      	beq.n	8001190 <HAL_ADC_ConfigChannel+0xcc>
 800118e:	e079      	b.n	8001284 <HAL_ADC_ConfigChannel+0x1c0>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2210      	movs	r2, #16
 8001196:	4013      	ands	r3, r2
 8001198:	d000      	beq.n	800119c <HAL_ADC_ConfigChannel+0xd8>
 800119a:	e071      	b.n	8001280 <HAL_ADC_ConfigChannel+0x1bc>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2220      	movs	r2, #32
 80011a2:	4013      	ands	r3, r2
 80011a4:	d000      	beq.n	80011a8 <HAL_ADC_ConfigChannel+0xe4>
 80011a6:	e069      	b.n	800127c <HAL_ADC_ConfigChannel+0x1b8>
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2240      	movs	r2, #64	; 0x40
 80011ae:	4013      	ands	r3, r2
 80011b0:	d000      	beq.n	80011b4 <HAL_ADC_ConfigChannel+0xf0>
 80011b2:	e061      	b.n	8001278 <HAL_ADC_ConfigChannel+0x1b4>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	4013      	ands	r3, r2
 80011bc:	d000      	beq.n	80011c0 <HAL_ADC_ConfigChannel+0xfc>
 80011be:	e059      	b.n	8001274 <HAL_ADC_ConfigChannel+0x1b0>
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4013      	ands	r3, r2
 80011ca:	d151      	bne.n	8001270 <HAL_ADC_ConfigChannel+0x1ac>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4013      	ands	r3, r2
 80011d6:	d149      	bne.n	800126c <HAL_ADC_ConfigChannel+0x1a8>
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4013      	ands	r3, r2
 80011e2:	d141      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x1a4>
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	4013      	ands	r3, r2
 80011ee:	d139      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x1a0>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	015b      	lsls	r3, r3, #5
 80011f8:	4013      	ands	r3, r2
 80011fa:	d131      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x19c>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	4013      	ands	r3, r2
 8001206:	d129      	bne.n	800125c <HAL_ADC_ConfigChannel+0x198>
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	01db      	lsls	r3, r3, #7
 8001210:	4013      	ands	r3, r2
 8001212:	d121      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x194>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	4013      	ands	r3, r2
 800121e:	d119      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x190>
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	025b      	lsls	r3, r3, #9
 8001228:	4013      	ands	r3, r2
 800122a:	d111      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x18c>
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	029b      	lsls	r3, r3, #10
 8001234:	4013      	ands	r3, r2
 8001236:	d109      	bne.n	800124c <HAL_ADC_ConfigChannel+0x188>
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	02db      	lsls	r3, r3, #11
 8001240:	4013      	ands	r3, r2
 8001242:	d001      	beq.n	8001248 <HAL_ADC_ConfigChannel+0x184>
 8001244:	2312      	movs	r3, #18
 8001246:	e024      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1ce>
 8001248:	2300      	movs	r3, #0
 800124a:	e022      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1ce>
 800124c:	2311      	movs	r3, #17
 800124e:	e020      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1ce>
 8001250:	2310      	movs	r3, #16
 8001252:	e01e      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1ce>
 8001254:	230f      	movs	r3, #15
 8001256:	e01c      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1ce>
 8001258:	230e      	movs	r3, #14
 800125a:	e01a      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1ce>
 800125c:	230d      	movs	r3, #13
 800125e:	e018      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1ce>
 8001260:	230c      	movs	r3, #12
 8001262:	e016      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1ce>
 8001264:	230b      	movs	r3, #11
 8001266:	e014      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1ce>
 8001268:	230a      	movs	r3, #10
 800126a:	e012      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1ce>
 800126c:	2309      	movs	r3, #9
 800126e:	e010      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1ce>
 8001270:	2308      	movs	r3, #8
 8001272:	e00e      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1ce>
 8001274:	2307      	movs	r3, #7
 8001276:	e00c      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1ce>
 8001278:	2306      	movs	r3, #6
 800127a:	e00a      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1ce>
 800127c:	2305      	movs	r3, #5
 800127e:	e008      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1ce>
 8001280:	2304      	movs	r3, #4
 8001282:	e006      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1ce>
 8001284:	2303      	movs	r3, #3
 8001286:	e004      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1ce>
 8001288:	2302      	movs	r3, #2
 800128a:	e002      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1ce>
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1ce>
 8001290:	2300      	movs	r3, #0
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	6852      	ldr	r2, [r2, #4]
 8001296:	201f      	movs	r0, #31
 8001298:	4002      	ands	r2, r0
 800129a:	4093      	lsls	r3, r2
 800129c:	000a      	movs	r2, r1
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69db      	ldr	r3, [r3, #28]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d808      	bhi.n	80012c6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6818      	ldr	r0, [r3, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	6859      	ldr	r1, [r3, #4]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	001a      	movs	r2, r3
 80012c2:	f7ff fc2e 	bl	8000b22 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	6819      	ldr	r1, [r3, #0]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	001a      	movs	r2, r3
 80012d4:	f7ff fc68 	bl	8000ba8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db00      	blt.n	80012e2 <HAL_ADC_ConfigChannel+0x21e>
 80012e0:	e0bc      	b.n	800145c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012e2:	4b50      	ldr	r3, [pc, #320]	; (8001424 <HAL_ADC_ConfigChannel+0x360>)
 80012e4:	0018      	movs	r0, r3
 80012e6:	f7ff fbdb 	bl	8000aa0 <LL_ADC_GetCommonPathInternalCh>
 80012ea:	0003      	movs	r3, r0
 80012ec:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a4d      	ldr	r2, [pc, #308]	; (8001428 <HAL_ADC_ConfigChannel+0x364>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d122      	bne.n	800133e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	041b      	lsls	r3, r3, #16
 80012fe:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001300:	d11d      	bne.n	800133e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	2280      	movs	r2, #128	; 0x80
 8001306:	0412      	lsls	r2, r2, #16
 8001308:	4313      	orrs	r3, r2
 800130a:	4a46      	ldr	r2, [pc, #280]	; (8001424 <HAL_ADC_ConfigChannel+0x360>)
 800130c:	0019      	movs	r1, r3
 800130e:	0010      	movs	r0, r2
 8001310:	f7ff fbb2 	bl	8000a78 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001314:	4b45      	ldr	r3, [pc, #276]	; (800142c <HAL_ADC_ConfigChannel+0x368>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4945      	ldr	r1, [pc, #276]	; (8001430 <HAL_ADC_ConfigChannel+0x36c>)
 800131a:	0018      	movs	r0, r3
 800131c:	f7fe fef0 	bl	8000100 <__udivsi3>
 8001320:	0003      	movs	r3, r0
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	0013      	movs	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	189b      	adds	r3, r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800132e:	e002      	b.n	8001336 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	3b01      	subs	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f9      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800133c:	e08e      	b.n	800145c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a3c      	ldr	r2, [pc, #240]	; (8001434 <HAL_ADC_ConfigChannel+0x370>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d10e      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	045b      	lsls	r3, r3, #17
 800134e:	4013      	ands	r3, r2
 8001350:	d109      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	2280      	movs	r2, #128	; 0x80
 8001356:	0452      	lsls	r2, r2, #17
 8001358:	4313      	orrs	r3, r2
 800135a:	4a32      	ldr	r2, [pc, #200]	; (8001424 <HAL_ADC_ConfigChannel+0x360>)
 800135c:	0019      	movs	r1, r3
 800135e:	0010      	movs	r0, r2
 8001360:	f7ff fb8a 	bl	8000a78 <LL_ADC_SetCommonPathInternalCh>
 8001364:	e07a      	b.n	800145c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a33      	ldr	r2, [pc, #204]	; (8001438 <HAL_ADC_ConfigChannel+0x374>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d000      	beq.n	8001372 <HAL_ADC_ConfigChannel+0x2ae>
 8001370:	e074      	b.n	800145c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	03db      	lsls	r3, r3, #15
 8001378:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800137a:	d000      	beq.n	800137e <HAL_ADC_ConfigChannel+0x2ba>
 800137c:	e06e      	b.n	800145c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	2280      	movs	r2, #128	; 0x80
 8001382:	03d2      	lsls	r2, r2, #15
 8001384:	4313      	orrs	r3, r2
 8001386:	4a27      	ldr	r2, [pc, #156]	; (8001424 <HAL_ADC_ConfigChannel+0x360>)
 8001388:	0019      	movs	r1, r3
 800138a:	0010      	movs	r0, r2
 800138c:	f7ff fb74 	bl	8000a78 <LL_ADC_SetCommonPathInternalCh>
 8001390:	e064      	b.n	800145c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	061b      	lsls	r3, r3, #24
 800139a:	429a      	cmp	r2, r3
 800139c:	d004      	beq.n	80013a8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80013a2:	4a1f      	ldr	r2, [pc, #124]	; (8001420 <HAL_ADC_ConfigChannel+0x35c>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d107      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	0019      	movs	r1, r3
 80013b2:	0010      	movs	r0, r2
 80013b4:	f7ff fbe6 	bl	8000b84 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	da4d      	bge.n	800145c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_ADC_ConfigChannel+0x360>)
 80013c2:	0018      	movs	r0, r3
 80013c4:	f7ff fb6c 	bl	8000aa0 <LL_ADC_GetCommonPathInternalCh>
 80013c8:	0003      	movs	r3, r0
 80013ca:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a15      	ldr	r2, [pc, #84]	; (8001428 <HAL_ADC_ConfigChannel+0x364>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d108      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4a18      	ldr	r2, [pc, #96]	; (800143c <HAL_ADC_ConfigChannel+0x378>)
 80013da:	4013      	ands	r3, r2
 80013dc:	4a11      	ldr	r2, [pc, #68]	; (8001424 <HAL_ADC_ConfigChannel+0x360>)
 80013de:	0019      	movs	r1, r3
 80013e0:	0010      	movs	r0, r2
 80013e2:	f7ff fb49 	bl	8000a78 <LL_ADC_SetCommonPathInternalCh>
 80013e6:	e039      	b.n	800145c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a11      	ldr	r2, [pc, #68]	; (8001434 <HAL_ADC_ConfigChannel+0x370>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d108      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4a12      	ldr	r2, [pc, #72]	; (8001440 <HAL_ADC_ConfigChannel+0x37c>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <HAL_ADC_ConfigChannel+0x360>)
 80013fa:	0019      	movs	r1, r3
 80013fc:	0010      	movs	r0, r2
 80013fe:	f7ff fb3b 	bl	8000a78 <LL_ADC_SetCommonPathInternalCh>
 8001402:	e02b      	b.n	800145c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <HAL_ADC_ConfigChannel+0x374>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d126      	bne.n	800145c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <HAL_ADC_ConfigChannel+0x380>)
 8001412:	4013      	ands	r3, r2
 8001414:	4a03      	ldr	r2, [pc, #12]	; (8001424 <HAL_ADC_ConfigChannel+0x360>)
 8001416:	0019      	movs	r1, r3
 8001418:	0010      	movs	r0, r2
 800141a:	f7ff fb2d 	bl	8000a78 <LL_ADC_SetCommonPathInternalCh>
 800141e:	e01d      	b.n	800145c <HAL_ADC_ConfigChannel+0x398>
 8001420:	80000004 	.word	0x80000004
 8001424:	40012708 	.word	0x40012708
 8001428:	b0001000 	.word	0xb0001000
 800142c:	20000000 	.word	0x20000000
 8001430:	00030d40 	.word	0x00030d40
 8001434:	b8004000 	.word	0xb8004000
 8001438:	b4002000 	.word	0xb4002000
 800143c:	ff7fffff 	.word	0xff7fffff
 8001440:	feffffff 	.word	0xfeffffff
 8001444:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144c:	2220      	movs	r2, #32
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001454:	2317      	movs	r3, #23
 8001456:	18fb      	adds	r3, r7, r3
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2254      	movs	r2, #84	; 0x54
 8001460:	2100      	movs	r1, #0
 8001462:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001464:	2317      	movs	r3, #23
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	781b      	ldrb	r3, [r3, #0]
}
 800146a:	0018      	movs	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	b006      	add	sp, #24
 8001470:	bd80      	pop	{r7, pc}
 8001472:	46c0      	nop			; (mov r8, r8)

08001474 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff fbe5 	bl	8000c54 <LL_ADC_IsEnabled>
 800148a:	1e03      	subs	r3, r0, #0
 800148c:	d000      	beq.n	8001490 <ADC_Enable+0x1c>
 800148e:	e069      	b.n	8001564 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	4a36      	ldr	r2, [pc, #216]	; (8001570 <ADC_Enable+0xfc>)
 8001498:	4013      	ands	r3, r2
 800149a:	d00d      	beq.n	80014b8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a0:	2210      	movs	r2, #16
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ac:	2201      	movs	r2, #1
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e056      	b.n	8001566 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	0018      	movs	r0, r3
 80014be:	f7ff fbb7 	bl	8000c30 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80014c2:	4b2c      	ldr	r3, [pc, #176]	; (8001574 <ADC_Enable+0x100>)
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff faeb 	bl	8000aa0 <LL_ADC_GetCommonPathInternalCh>
 80014ca:	0002      	movs	r2, r0
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	041b      	lsls	r3, r3, #16
 80014d0:	4013      	ands	r3, r2
 80014d2:	d00f      	beq.n	80014f4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014d4:	4b28      	ldr	r3, [pc, #160]	; (8001578 <ADC_Enable+0x104>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4928      	ldr	r1, [pc, #160]	; (800157c <ADC_Enable+0x108>)
 80014da:	0018      	movs	r0, r3
 80014dc:	f7fe fe10 	bl	8000100 <__udivsi3>
 80014e0:	0003      	movs	r3, r0
 80014e2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80014e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80014e6:	e002      	b.n	80014ee <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f9      	bne.n	80014e8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	7e5b      	ldrb	r3, [r3, #25]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d033      	beq.n	8001564 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80014fc:	f7ff fab2 	bl	8000a64 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001504:	e027      	b.n	8001556 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	0018      	movs	r0, r3
 800150c:	f7ff fba2 	bl	8000c54 <LL_ADC_IsEnabled>
 8001510:	1e03      	subs	r3, r0, #0
 8001512:	d104      	bne.n	800151e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	0018      	movs	r0, r3
 800151a:	f7ff fb89 	bl	8000c30 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800151e:	f7ff faa1 	bl	8000a64 <HAL_GetTick>
 8001522:	0002      	movs	r2, r0
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d914      	bls.n	8001556 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2201      	movs	r2, #1
 8001534:	4013      	ands	r3, r2
 8001536:	2b01      	cmp	r3, #1
 8001538:	d00d      	beq.n	8001556 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153e:	2210      	movs	r2, #16
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154a:	2201      	movs	r2, #1
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e007      	b.n	8001566 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2201      	movs	r2, #1
 800155e:	4013      	ands	r3, r2
 8001560:	2b01      	cmp	r3, #1
 8001562:	d1d0      	bne.n	8001506 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	0018      	movs	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	b004      	add	sp, #16
 800156c:	bd80      	pop	{r7, pc}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	80000017 	.word	0x80000017
 8001574:	40012708 	.word	0x40012708
 8001578:	20000000 	.word	0x20000000
 800157c:	00030d40 	.word	0x00030d40

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	0002      	movs	r2, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	1dfb      	adds	r3, r7, #7
 800158c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800158e:	1dfb      	adds	r3, r7, #7
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b7f      	cmp	r3, #127	; 0x7f
 8001594:	d828      	bhi.n	80015e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001596:	4a2f      	ldr	r2, [pc, #188]	; (8001654 <__NVIC_SetPriority+0xd4>)
 8001598:	1dfb      	adds	r3, r7, #7
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b25b      	sxtb	r3, r3
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	33c0      	adds	r3, #192	; 0xc0
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	589b      	ldr	r3, [r3, r2]
 80015a6:	1dfa      	adds	r2, r7, #7
 80015a8:	7812      	ldrb	r2, [r2, #0]
 80015aa:	0011      	movs	r1, r2
 80015ac:	2203      	movs	r2, #3
 80015ae:	400a      	ands	r2, r1
 80015b0:	00d2      	lsls	r2, r2, #3
 80015b2:	21ff      	movs	r1, #255	; 0xff
 80015b4:	4091      	lsls	r1, r2
 80015b6:	000a      	movs	r2, r1
 80015b8:	43d2      	mvns	r2, r2
 80015ba:	401a      	ands	r2, r3
 80015bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	019b      	lsls	r3, r3, #6
 80015c2:	22ff      	movs	r2, #255	; 0xff
 80015c4:	401a      	ands	r2, r3
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	0018      	movs	r0, r3
 80015cc:	2303      	movs	r3, #3
 80015ce:	4003      	ands	r3, r0
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d4:	481f      	ldr	r0, [pc, #124]	; (8001654 <__NVIC_SetPriority+0xd4>)
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	430a      	orrs	r2, r1
 80015e0:	33c0      	adds	r3, #192	; 0xc0
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015e6:	e031      	b.n	800164c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015e8:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <__NVIC_SetPriority+0xd8>)
 80015ea:	1dfb      	adds	r3, r7, #7
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	0019      	movs	r1, r3
 80015f0:	230f      	movs	r3, #15
 80015f2:	400b      	ands	r3, r1
 80015f4:	3b08      	subs	r3, #8
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3306      	adds	r3, #6
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	18d3      	adds	r3, r2, r3
 80015fe:	3304      	adds	r3, #4
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	1dfa      	adds	r2, r7, #7
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	0011      	movs	r1, r2
 8001608:	2203      	movs	r2, #3
 800160a:	400a      	ands	r2, r1
 800160c:	00d2      	lsls	r2, r2, #3
 800160e:	21ff      	movs	r1, #255	; 0xff
 8001610:	4091      	lsls	r1, r2
 8001612:	000a      	movs	r2, r1
 8001614:	43d2      	mvns	r2, r2
 8001616:	401a      	ands	r2, r3
 8001618:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	019b      	lsls	r3, r3, #6
 800161e:	22ff      	movs	r2, #255	; 0xff
 8001620:	401a      	ands	r2, r3
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	0018      	movs	r0, r3
 8001628:	2303      	movs	r3, #3
 800162a:	4003      	ands	r3, r0
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001630:	4809      	ldr	r0, [pc, #36]	; (8001658 <__NVIC_SetPriority+0xd8>)
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	001c      	movs	r4, r3
 8001638:	230f      	movs	r3, #15
 800163a:	4023      	ands	r3, r4
 800163c:	3b08      	subs	r3, #8
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	430a      	orrs	r2, r1
 8001642:	3306      	adds	r3, #6
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	18c3      	adds	r3, r0, r3
 8001648:	3304      	adds	r3, #4
 800164a:	601a      	str	r2, [r3, #0]
}
 800164c:	46c0      	nop			; (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b003      	add	sp, #12
 8001652:	bd90      	pop	{r4, r7, pc}
 8001654:	e000e100 	.word	0xe000e100
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	1e5a      	subs	r2, r3, #1
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	045b      	lsls	r3, r3, #17
 800166c:	429a      	cmp	r2, r3
 800166e:	d301      	bcc.n	8001674 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001670:	2301      	movs	r3, #1
 8001672:	e010      	b.n	8001696 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <SysTick_Config+0x44>)
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	3a01      	subs	r2, #1
 800167a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167c:	2301      	movs	r3, #1
 800167e:	425b      	negs	r3, r3
 8001680:	2103      	movs	r1, #3
 8001682:	0018      	movs	r0, r3
 8001684:	f7ff ff7c 	bl	8001580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <SysTick_Config+0x44>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168e:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <SysTick_Config+0x44>)
 8001690:	2207      	movs	r2, #7
 8001692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001694:	2300      	movs	r3, #0
}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	b002      	add	sp, #8
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	e000e010 	.word	0xe000e010

080016a4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	210f      	movs	r1, #15
 80016b0:	187b      	adds	r3, r7, r1
 80016b2:	1c02      	adds	r2, r0, #0
 80016b4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	0011      	movs	r1, r2
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7ff ff5d 	bl	8001580 <__NVIC_SetPriority>
}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b004      	add	sp, #16
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	0018      	movs	r0, r3
 80016da:	f7ff ffbf 	bl	800165c <SysTick_Config>
 80016de:	0003      	movs	r3, r0
}
 80016e0:	0018      	movs	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b002      	add	sp, #8
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f6:	e147      	b.n	8001988 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2101      	movs	r1, #1
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	4091      	lsls	r1, r2
 8001702:	000a      	movs	r2, r1
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d100      	bne.n	8001710 <HAL_GPIO_Init+0x28>
 800170e:	e138      	b.n	8001982 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2203      	movs	r2, #3
 8001716:	4013      	ands	r3, r2
 8001718:	2b01      	cmp	r3, #1
 800171a:	d005      	beq.n	8001728 <HAL_GPIO_Init+0x40>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2203      	movs	r2, #3
 8001722:	4013      	ands	r3, r2
 8001724:	2b02      	cmp	r3, #2
 8001726:	d130      	bne.n	800178a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	2203      	movs	r2, #3
 8001734:	409a      	lsls	r2, r3
 8001736:	0013      	movs	r3, r2
 8001738:	43da      	mvns	r2, r3
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	409a      	lsls	r2, r3
 800174a:	0013      	movs	r3, r2
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800175e:	2201      	movs	r2, #1
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
 8001764:	0013      	movs	r3, r2
 8001766:	43da      	mvns	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	2201      	movs	r2, #1
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	409a      	lsls	r2, r3
 800177c:	0013      	movs	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2203      	movs	r2, #3
 8001790:	4013      	ands	r3, r2
 8001792:	2b03      	cmp	r3, #3
 8001794:	d017      	beq.n	80017c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	2203      	movs	r2, #3
 80017a2:	409a      	lsls	r2, r3
 80017a4:	0013      	movs	r3, r2
 80017a6:	43da      	mvns	r2, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	409a      	lsls	r2, r3
 80017b8:	0013      	movs	r3, r2
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2203      	movs	r2, #3
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d123      	bne.n	800181a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	08da      	lsrs	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3208      	adds	r2, #8
 80017da:	0092      	lsls	r2, r2, #2
 80017dc:	58d3      	ldr	r3, [r2, r3]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	2207      	movs	r2, #7
 80017e4:	4013      	ands	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	220f      	movs	r2, #15
 80017ea:	409a      	lsls	r2, r3
 80017ec:	0013      	movs	r3, r2
 80017ee:	43da      	mvns	r2, r3
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	691a      	ldr	r2, [r3, #16]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	2107      	movs	r1, #7
 80017fe:	400b      	ands	r3, r1
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	409a      	lsls	r2, r3
 8001804:	0013      	movs	r3, r2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	08da      	lsrs	r2, r3, #3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3208      	adds	r2, #8
 8001814:	0092      	lsls	r2, r2, #2
 8001816:	6939      	ldr	r1, [r7, #16]
 8001818:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	2203      	movs	r2, #3
 8001826:	409a      	lsls	r2, r3
 8001828:	0013      	movs	r3, r2
 800182a:	43da      	mvns	r2, r3
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2203      	movs	r2, #3
 8001838:	401a      	ands	r2, r3
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	409a      	lsls	r2, r3
 8001840:	0013      	movs	r3, r2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	23c0      	movs	r3, #192	; 0xc0
 8001854:	029b      	lsls	r3, r3, #10
 8001856:	4013      	ands	r3, r2
 8001858:	d100      	bne.n	800185c <HAL_GPIO_Init+0x174>
 800185a:	e092      	b.n	8001982 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800185c:	4a50      	ldr	r2, [pc, #320]	; (80019a0 <HAL_GPIO_Init+0x2b8>)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3318      	adds	r3, #24
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	589b      	ldr	r3, [r3, r2]
 8001868:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	2203      	movs	r2, #3
 800186e:	4013      	ands	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	220f      	movs	r2, #15
 8001874:	409a      	lsls	r2, r3
 8001876:	0013      	movs	r3, r2
 8001878:	43da      	mvns	r2, r3
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	23a0      	movs	r3, #160	; 0xa0
 8001884:	05db      	lsls	r3, r3, #23
 8001886:	429a      	cmp	r2, r3
 8001888:	d013      	beq.n	80018b2 <HAL_GPIO_Init+0x1ca>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a45      	ldr	r2, [pc, #276]	; (80019a4 <HAL_GPIO_Init+0x2bc>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d00d      	beq.n	80018ae <HAL_GPIO_Init+0x1c6>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a44      	ldr	r2, [pc, #272]	; (80019a8 <HAL_GPIO_Init+0x2c0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d007      	beq.n	80018aa <HAL_GPIO_Init+0x1c2>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a43      	ldr	r2, [pc, #268]	; (80019ac <HAL_GPIO_Init+0x2c4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d101      	bne.n	80018a6 <HAL_GPIO_Init+0x1be>
 80018a2:	2303      	movs	r3, #3
 80018a4:	e006      	b.n	80018b4 <HAL_GPIO_Init+0x1cc>
 80018a6:	2305      	movs	r3, #5
 80018a8:	e004      	b.n	80018b4 <HAL_GPIO_Init+0x1cc>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e002      	b.n	80018b4 <HAL_GPIO_Init+0x1cc>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <HAL_GPIO_Init+0x1cc>
 80018b2:	2300      	movs	r3, #0
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	2103      	movs	r1, #3
 80018b8:	400a      	ands	r2, r1
 80018ba:	00d2      	lsls	r2, r2, #3
 80018bc:	4093      	lsls	r3, r2
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80018c4:	4936      	ldr	r1, [pc, #216]	; (80019a0 <HAL_GPIO_Init+0x2b8>)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	3318      	adds	r3, #24
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018d2:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <HAL_GPIO_Init+0x2b8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	43da      	mvns	r2, r3
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	035b      	lsls	r3, r3, #13
 80018ea:	4013      	ands	r3, r2
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018f6:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <HAL_GPIO_Init+0x2b8>)
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80018fc:	4b28      	ldr	r3, [pc, #160]	; (80019a0 <HAL_GPIO_Init+0x2b8>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	43da      	mvns	r2, r3
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	039b      	lsls	r3, r3, #14
 8001914:	4013      	ands	r3, r2
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001920:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <HAL_GPIO_Init+0x2b8>)
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001926:	4a1e      	ldr	r2, [pc, #120]	; (80019a0 <HAL_GPIO_Init+0x2b8>)
 8001928:	2384      	movs	r3, #132	; 0x84
 800192a:	58d3      	ldr	r3, [r2, r3]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	43da      	mvns	r2, r3
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	029b      	lsls	r3, r3, #10
 8001940:	4013      	ands	r3, r2
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800194c:	4914      	ldr	r1, [pc, #80]	; (80019a0 <HAL_GPIO_Init+0x2b8>)
 800194e:	2284      	movs	r2, #132	; 0x84
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001954:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <HAL_GPIO_Init+0x2b8>)
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	58d3      	ldr	r3, [r2, r3]
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	43da      	mvns	r2, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	025b      	lsls	r3, r3, #9
 800196e:	4013      	ands	r3, r2
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800197a:	4909      	ldr	r1, [pc, #36]	; (80019a0 <HAL_GPIO_Init+0x2b8>)
 800197c:	2280      	movs	r2, #128	; 0x80
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	40da      	lsrs	r2, r3
 8001990:	1e13      	subs	r3, r2, #0
 8001992:	d000      	beq.n	8001996 <HAL_GPIO_Init+0x2ae>
 8001994:	e6b0      	b.n	80016f8 <HAL_GPIO_Init+0x10>
  }
}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	46c0      	nop			; (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	b006      	add	sp, #24
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021800 	.word	0x40021800
 80019a4:	50000400 	.word	0x50000400
 80019a8:	50000800 	.word	0x50000800
 80019ac:	50000c00 	.word	0x50000c00

080019b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e082      	b.n	8001ac8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2241      	movs	r2, #65	; 0x41
 80019c6:	5c9b      	ldrb	r3, [r3, r2]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d107      	bne.n	80019de <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2240      	movs	r2, #64	; 0x40
 80019d2:	2100      	movs	r1, #0
 80019d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	0018      	movs	r0, r3
 80019da:	f7fe fec1 	bl	8000760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2241      	movs	r2, #65	; 0x41
 80019e2:	2124      	movs	r1, #36	; 0x24
 80019e4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2101      	movs	r1, #1
 80019f2:	438a      	bics	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4934      	ldr	r1, [pc, #208]	; (8001ad0 <HAL_I2C_Init+0x120>)
 8001a00:	400a      	ands	r2, r1
 8001a02:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4931      	ldr	r1, [pc, #196]	; (8001ad4 <HAL_I2C_Init+0x124>)
 8001a10:	400a      	ands	r2, r1
 8001a12:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d108      	bne.n	8001a2e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2180      	movs	r1, #128	; 0x80
 8001a26:	0209      	lsls	r1, r1, #8
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	e007      	b.n	8001a3e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2184      	movs	r1, #132	; 0x84
 8001a38:	0209      	lsls	r1, r1, #8
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d104      	bne.n	8001a50 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2280      	movs	r2, #128	; 0x80
 8001a4c:	0112      	lsls	r2, r2, #4
 8001a4e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	491f      	ldr	r1, [pc, #124]	; (8001ad8 <HAL_I2C_Init+0x128>)
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	491a      	ldr	r1, [pc, #104]	; (8001ad4 <HAL_I2C_Init+0x124>)
 8001a6c:	400a      	ands	r2, r1
 8001a6e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69d9      	ldr	r1, [r3, #28]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1a      	ldr	r2, [r3, #32]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2241      	movs	r2, #65	; 0x41
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2242      	movs	r2, #66	; 0x42
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	0018      	movs	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b002      	add	sp, #8
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	f0ffffff 	.word	0xf0ffffff
 8001ad4:	ffff7fff 	.word	0xffff7fff
 8001ad8:	02008000 	.word	0x02008000

08001adc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2241      	movs	r2, #65	; 0x41
 8001aea:	5c9b      	ldrb	r3, [r3, r2]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b20      	cmp	r3, #32
 8001af0:	d138      	bne.n	8001b64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2240      	movs	r2, #64	; 0x40
 8001af6:	5c9b      	ldrb	r3, [r3, r2]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d101      	bne.n	8001b00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001afc:	2302      	movs	r3, #2
 8001afe:	e032      	b.n	8001b66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2240      	movs	r2, #64	; 0x40
 8001b04:	2101      	movs	r1, #1
 8001b06:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2241      	movs	r2, #65	; 0x41
 8001b0c:	2124      	movs	r1, #36	; 0x24
 8001b0e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	438a      	bics	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4911      	ldr	r1, [pc, #68]	; (8001b70 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6819      	ldr	r1, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2241      	movs	r2, #65	; 0x41
 8001b54:	2120      	movs	r1, #32
 8001b56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2240      	movs	r2, #64	; 0x40
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	e000      	b.n	8001b66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b64:	2302      	movs	r3, #2
  }
}
 8001b66:	0018      	movs	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b002      	add	sp, #8
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	ffffefff 	.word	0xffffefff

08001b74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2241      	movs	r2, #65	; 0x41
 8001b82:	5c9b      	ldrb	r3, [r3, r2]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b20      	cmp	r3, #32
 8001b88:	d139      	bne.n	8001bfe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2240      	movs	r2, #64	; 0x40
 8001b8e:	5c9b      	ldrb	r3, [r3, r2]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e033      	b.n	8001c00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2240      	movs	r2, #64	; 0x40
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2241      	movs	r2, #65	; 0x41
 8001ba4:	2124      	movs	r1, #36	; 0x24
 8001ba6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	438a      	bics	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2101      	movs	r1, #1
 8001be6:	430a      	orrs	r2, r1
 8001be8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2241      	movs	r2, #65	; 0x41
 8001bee:	2120      	movs	r1, #32
 8001bf0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2240      	movs	r2, #64	; 0x40
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	e000      	b.n	8001c00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001bfe:	2302      	movs	r3, #2
  }
}
 8001c00:	0018      	movs	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b004      	add	sp, #16
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	fffff0ff 	.word	0xfffff0ff

08001c0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001c14:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a19      	ldr	r2, [pc, #100]	; (8001c80 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d11f      	bne.n	8001c70 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	0013      	movs	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	189b      	adds	r3, r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4912      	ldr	r1, [pc, #72]	; (8001c88 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001c3e:	0018      	movs	r0, r3
 8001c40:	f7fe fa5e 	bl	8000100 <__udivsi3>
 8001c44:	0003      	movs	r3, r0
 8001c46:	3301      	adds	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c4a:	e008      	b.n	8001c5e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	e001      	b.n	8001c5e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e009      	b.n	8001c72 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c60:	695a      	ldr	r2, [r3, #20]
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	401a      	ands	r2, r3
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d0ed      	beq.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b004      	add	sp, #16
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	40007000 	.word	0x40007000
 8001c80:	fffff9ff 	.word	0xfffff9ff
 8001c84:	20000000 	.word	0x20000000
 8001c88:	000f4240 	.word	0x000f4240

08001c8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e2f3      	b.n	8002286 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d100      	bne.n	8001caa <HAL_RCC_OscConfig+0x1e>
 8001ca8:	e07c      	b.n	8001da4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001caa:	4bc3      	ldr	r3, [pc, #780]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2238      	movs	r2, #56	; 0x38
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb4:	4bc0      	ldr	r3, [pc, #768]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	2203      	movs	r2, #3
 8001cba:	4013      	ands	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b10      	cmp	r3, #16
 8001cc2:	d102      	bne.n	8001cca <HAL_RCC_OscConfig+0x3e>
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d002      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d10b      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	4bb9      	ldr	r3, [pc, #740]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	029b      	lsls	r3, r3, #10
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d062      	beq.n	8001da2 <HAL_RCC_OscConfig+0x116>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d15e      	bne.n	8001da2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e2ce      	b.n	8002286 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	025b      	lsls	r3, r3, #9
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d107      	bne.n	8001d04 <HAL_RCC_OscConfig+0x78>
 8001cf4:	4bb0      	ldr	r3, [pc, #704]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4baf      	ldr	r3, [pc, #700]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001cfa:	2180      	movs	r1, #128	; 0x80
 8001cfc:	0249      	lsls	r1, r1, #9
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	e020      	b.n	8001d46 <HAL_RCC_OscConfig+0xba>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	23a0      	movs	r3, #160	; 0xa0
 8001d0a:	02db      	lsls	r3, r3, #11
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d10e      	bne.n	8001d2e <HAL_RCC_OscConfig+0xa2>
 8001d10:	4ba9      	ldr	r3, [pc, #676]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4ba8      	ldr	r3, [pc, #672]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001d16:	2180      	movs	r1, #128	; 0x80
 8001d18:	02c9      	lsls	r1, r1, #11
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	4ba6      	ldr	r3, [pc, #664]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	4ba5      	ldr	r3, [pc, #660]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001d24:	2180      	movs	r1, #128	; 0x80
 8001d26:	0249      	lsls	r1, r1, #9
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	e00b      	b.n	8001d46 <HAL_RCC_OscConfig+0xba>
 8001d2e:	4ba2      	ldr	r3, [pc, #648]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4ba1      	ldr	r3, [pc, #644]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001d34:	49a1      	ldr	r1, [pc, #644]	; (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001d36:	400a      	ands	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	4b9f      	ldr	r3, [pc, #636]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	4b9e      	ldr	r3, [pc, #632]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001d40:	499f      	ldr	r1, [pc, #636]	; (8001fc0 <HAL_RCC_OscConfig+0x334>)
 8001d42:	400a      	ands	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d014      	beq.n	8001d78 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4e:	f7fe fe89 	bl	8000a64 <HAL_GetTick>
 8001d52:	0003      	movs	r3, r0
 8001d54:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7fe fe84 	bl	8000a64 <HAL_GetTick>
 8001d5c:	0002      	movs	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e28d      	b.n	8002286 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6a:	4b93      	ldr	r3, [pc, #588]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	029b      	lsls	r3, r3, #10
 8001d72:	4013      	ands	r3, r2
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0xcc>
 8001d76:	e015      	b.n	8001da4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7fe fe74 	bl	8000a64 <HAL_GetTick>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d82:	f7fe fe6f 	bl	8000a64 <HAL_GetTick>
 8001d86:	0002      	movs	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b64      	cmp	r3, #100	; 0x64
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e278      	b.n	8002286 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d94:	4b88      	ldr	r3, [pc, #544]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	029b      	lsls	r3, r3, #10
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d1f0      	bne.n	8001d82 <HAL_RCC_OscConfig+0xf6>
 8001da0:	e000      	b.n	8001da4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2202      	movs	r2, #2
 8001daa:	4013      	ands	r3, r2
 8001dac:	d100      	bne.n	8001db0 <HAL_RCC_OscConfig+0x124>
 8001dae:	e099      	b.n	8001ee4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001db0:	4b81      	ldr	r3, [pc, #516]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2238      	movs	r2, #56	; 0x38
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dba:	4b7f      	ldr	r3, [pc, #508]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2b10      	cmp	r3, #16
 8001dc8:	d102      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x144>
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d002      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d135      	bne.n	8001e42 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd6:	4b78      	ldr	r3, [pc, #480]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4013      	ands	r3, r2
 8001de0:	d005      	beq.n	8001dee <HAL_RCC_OscConfig+0x162>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e24b      	b.n	8002286 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dee:	4b72      	ldr	r3, [pc, #456]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4a74      	ldr	r2, [pc, #464]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	0019      	movs	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	021a      	lsls	r2, r3, #8
 8001dfe:	4b6e      	ldr	r3, [pc, #440]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001e00:	430a      	orrs	r2, r1
 8001e02:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d112      	bne.n	8001e30 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e0a:	4b6b      	ldr	r3, [pc, #428]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a6e      	ldr	r2, [pc, #440]	; (8001fc8 <HAL_RCC_OscConfig+0x33c>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	0019      	movs	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	4b67      	ldr	r3, [pc, #412]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001e1e:	4b66      	ldr	r3, [pc, #408]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	0adb      	lsrs	r3, r3, #11
 8001e24:	2207      	movs	r2, #7
 8001e26:	4013      	ands	r3, r2
 8001e28:	4a68      	ldr	r2, [pc, #416]	; (8001fcc <HAL_RCC_OscConfig+0x340>)
 8001e2a:	40da      	lsrs	r2, r3
 8001e2c:	4b68      	ldr	r3, [pc, #416]	; (8001fd0 <HAL_RCC_OscConfig+0x344>)
 8001e2e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e30:	4b68      	ldr	r3, [pc, #416]	; (8001fd4 <HAL_RCC_OscConfig+0x348>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7fe fdb9 	bl	80009ac <HAL_InitTick>
 8001e3a:	1e03      	subs	r3, r0, #0
 8001e3c:	d051      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e221      	b.n	8002286 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d030      	beq.n	8001eac <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e4a:	4b5b      	ldr	r3, [pc, #364]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a5e      	ldr	r2, [pc, #376]	; (8001fc8 <HAL_RCC_OscConfig+0x33c>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	0019      	movs	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	4b57      	ldr	r3, [pc, #348]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001e5e:	4b56      	ldr	r3, [pc, #344]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4b55      	ldr	r3, [pc, #340]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001e64:	2180      	movs	r1, #128	; 0x80
 8001e66:	0049      	lsls	r1, r1, #1
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7fe fdfa 	bl	8000a64 <HAL_GetTick>
 8001e70:	0003      	movs	r3, r0
 8001e72:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e76:	f7fe fdf5 	bl	8000a64 <HAL_GetTick>
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e1fe      	b.n	8002286 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e88:	4b4b      	ldr	r3, [pc, #300]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4013      	ands	r3, r2
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e94:	4b48      	ldr	r3, [pc, #288]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	4a4a      	ldr	r2, [pc, #296]	; (8001fc4 <HAL_RCC_OscConfig+0x338>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	021a      	lsls	r2, r3, #8
 8001ea4:	4b44      	ldr	r3, [pc, #272]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	e01b      	b.n	8001ee4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001eac:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001eb2:	4949      	ldr	r1, [pc, #292]	; (8001fd8 <HAL_RCC_OscConfig+0x34c>)
 8001eb4:	400a      	ands	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7fe fdd4 	bl	8000a64 <HAL_GetTick>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec2:	f7fe fdcf 	bl	8000a64 <HAL_GetTick>
 8001ec6:	0002      	movs	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e1d8      	b.n	8002286 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ed4:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4013      	ands	r3, r2
 8001ede:	d1f0      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x236>
 8001ee0:	e000      	b.n	8001ee4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ee2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2208      	movs	r2, #8
 8001eea:	4013      	ands	r3, r2
 8001eec:	d047      	beq.n	8001f7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001eee:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2238      	movs	r2, #56	; 0x38
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b18      	cmp	r3, #24
 8001ef8:	d10a      	bne.n	8001f10 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001efa:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efe:	2202      	movs	r2, #2
 8001f00:	4013      	ands	r3, r2
 8001f02:	d03c      	beq.n	8001f7e <HAL_RCC_OscConfig+0x2f2>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d138      	bne.n	8001f7e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e1ba      	b.n	8002286 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d019      	beq.n	8001f4c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001f18:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001f1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f1c:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001f1e:	2101      	movs	r1, #1
 8001f20:	430a      	orrs	r2, r1
 8001f22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7fe fd9e 	bl	8000a64 <HAL_GetTick>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f2e:	f7fe fd99 	bl	8000a64 <HAL_GetTick>
 8001f32:	0002      	movs	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e1a2      	b.n	8002286 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f40:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f44:	2202      	movs	r2, #2
 8001f46:	4013      	ands	r3, r2
 8001f48:	d0f1      	beq.n	8001f2e <HAL_RCC_OscConfig+0x2a2>
 8001f4a:	e018      	b.n	8001f7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001f4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001f52:	2101      	movs	r1, #1
 8001f54:	438a      	bics	r2, r1
 8001f56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7fe fd84 	bl	8000a64 <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f62:	f7fe fd7f 	bl	8000a64 <HAL_GetTick>
 8001f66:	0002      	movs	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e188      	b.n	8002286 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f78:	2202      	movs	r2, #2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d1f1      	bne.n	8001f62 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2204      	movs	r2, #4
 8001f84:	4013      	ands	r3, r2
 8001f86:	d100      	bne.n	8001f8a <HAL_RCC_OscConfig+0x2fe>
 8001f88:	e0c6      	b.n	8002118 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8a:	231f      	movs	r3, #31
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2238      	movs	r2, #56	; 0x38
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b20      	cmp	r3, #32
 8001f9c:	d11e      	bne.n	8001fdc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_RCC_OscConfig+0x32c>)
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d100      	bne.n	8001faa <HAL_RCC_OscConfig+0x31e>
 8001fa8:	e0b6      	b.n	8002118 <HAL_RCC_OscConfig+0x48c>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d000      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x328>
 8001fb2:	e0b1      	b.n	8002118 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e166      	b.n	8002286 <HAL_RCC_OscConfig+0x5fa>
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	fffeffff 	.word	0xfffeffff
 8001fc0:	fffbffff 	.word	0xfffbffff
 8001fc4:	ffff80ff 	.word	0xffff80ff
 8001fc8:	ffffc7ff 	.word	0xffffc7ff
 8001fcc:	00f42400 	.word	0x00f42400
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	20000004 	.word	0x20000004
 8001fd8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fdc:	4bac      	ldr	r3, [pc, #688]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 8001fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	055b      	lsls	r3, r3, #21
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_OscConfig+0x360>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <HAL_RCC_OscConfig+0x362>
 8001fec:	2300      	movs	r3, #0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d011      	beq.n	8002016 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	4ba7      	ldr	r3, [pc, #668]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 8001ff4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ff6:	4ba6      	ldr	r3, [pc, #664]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 8001ff8:	2180      	movs	r1, #128	; 0x80
 8001ffa:	0549      	lsls	r1, r1, #21
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002000:	4ba3      	ldr	r3, [pc, #652]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 8002002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	055b      	lsls	r3, r3, #21
 8002008:	4013      	ands	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800200e:	231f      	movs	r3, #31
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002016:	4b9f      	ldr	r3, [pc, #636]	; (8002294 <HAL_RCC_OscConfig+0x608>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4013      	ands	r3, r2
 8002020:	d11a      	bne.n	8002058 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002022:	4b9c      	ldr	r3, [pc, #624]	; (8002294 <HAL_RCC_OscConfig+0x608>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4b9b      	ldr	r3, [pc, #620]	; (8002294 <HAL_RCC_OscConfig+0x608>)
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	0049      	lsls	r1, r1, #1
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002030:	f7fe fd18 	bl	8000a64 <HAL_GetTick>
 8002034:	0003      	movs	r3, r0
 8002036:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203a:	f7fe fd13 	bl	8000a64 <HAL_GetTick>
 800203e:	0002      	movs	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e11c      	b.n	8002286 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800204c:	4b91      	ldr	r3, [pc, #580]	; (8002294 <HAL_RCC_OscConfig+0x608>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4013      	ands	r3, r2
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d106      	bne.n	800206e <HAL_RCC_OscConfig+0x3e2>
 8002060:	4b8b      	ldr	r3, [pc, #556]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 8002062:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002064:	4b8a      	ldr	r3, [pc, #552]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 8002066:	2101      	movs	r1, #1
 8002068:	430a      	orrs	r2, r1
 800206a:	65da      	str	r2, [r3, #92]	; 0x5c
 800206c:	e01c      	b.n	80020a8 <HAL_RCC_OscConfig+0x41c>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b05      	cmp	r3, #5
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x404>
 8002076:	4b86      	ldr	r3, [pc, #536]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 8002078:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800207a:	4b85      	ldr	r3, [pc, #532]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 800207c:	2104      	movs	r1, #4
 800207e:	430a      	orrs	r2, r1
 8002080:	65da      	str	r2, [r3, #92]	; 0x5c
 8002082:	4b83      	ldr	r3, [pc, #524]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 8002084:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002086:	4b82      	ldr	r3, [pc, #520]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 8002088:	2101      	movs	r1, #1
 800208a:	430a      	orrs	r2, r1
 800208c:	65da      	str	r2, [r3, #92]	; 0x5c
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0x41c>
 8002090:	4b7f      	ldr	r3, [pc, #508]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 8002092:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002094:	4b7e      	ldr	r3, [pc, #504]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 8002096:	2101      	movs	r1, #1
 8002098:	438a      	bics	r2, r1
 800209a:	65da      	str	r2, [r3, #92]	; 0x5c
 800209c:	4b7c      	ldr	r3, [pc, #496]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 800209e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020a0:	4b7b      	ldr	r3, [pc, #492]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 80020a2:	2104      	movs	r1, #4
 80020a4:	438a      	bics	r2, r1
 80020a6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d014      	beq.n	80020da <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7fe fcd8 	bl	8000a64 <HAL_GetTick>
 80020b4:	0003      	movs	r3, r0
 80020b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b8:	e009      	b.n	80020ce <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7fe fcd3 	bl	8000a64 <HAL_GetTick>
 80020be:	0002      	movs	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	4a74      	ldr	r2, [pc, #464]	; (8002298 <HAL_RCC_OscConfig+0x60c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e0db      	b.n	8002286 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ce:	4b70      	ldr	r3, [pc, #448]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	2202      	movs	r2, #2
 80020d4:	4013      	ands	r3, r2
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x42e>
 80020d8:	e013      	b.n	8002102 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020da:	f7fe fcc3 	bl	8000a64 <HAL_GetTick>
 80020de:	0003      	movs	r3, r0
 80020e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020e2:	e009      	b.n	80020f8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e4:	f7fe fcbe 	bl	8000a64 <HAL_GetTick>
 80020e8:	0002      	movs	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	4a6a      	ldr	r2, [pc, #424]	; (8002298 <HAL_RCC_OscConfig+0x60c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e0c6      	b.n	8002286 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f8:	4b65      	ldr	r3, [pc, #404]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 80020fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fc:	2202      	movs	r2, #2
 80020fe:	4013      	ands	r3, r2
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002102:	231f      	movs	r3, #31
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d105      	bne.n	8002118 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800210c:	4b60      	ldr	r3, [pc, #384]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 800210e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002110:	4b5f      	ldr	r3, [pc, #380]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 8002112:	4962      	ldr	r1, [pc, #392]	; (800229c <HAL_RCC_OscConfig+0x610>)
 8002114:	400a      	ands	r2, r1
 8002116:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d100      	bne.n	8002122 <HAL_RCC_OscConfig+0x496>
 8002120:	e0b0      	b.n	8002284 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002122:	4b5b      	ldr	r3, [pc, #364]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2238      	movs	r2, #56	; 0x38
 8002128:	4013      	ands	r3, r2
 800212a:	2b10      	cmp	r3, #16
 800212c:	d100      	bne.n	8002130 <HAL_RCC_OscConfig+0x4a4>
 800212e:	e078      	b.n	8002222 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d153      	bne.n	80021e0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002138:	4b55      	ldr	r3, [pc, #340]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b54      	ldr	r3, [pc, #336]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 800213e:	4958      	ldr	r1, [pc, #352]	; (80022a0 <HAL_RCC_OscConfig+0x614>)
 8002140:	400a      	ands	r2, r1
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7fe fc8e 	bl	8000a64 <HAL_GetTick>
 8002148:	0003      	movs	r3, r0
 800214a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214e:	f7fe fc89 	bl	8000a64 <HAL_GetTick>
 8002152:	0002      	movs	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e092      	b.n	8002286 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002160:	4b4b      	ldr	r3, [pc, #300]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	049b      	lsls	r3, r3, #18
 8002168:	4013      	ands	r3, r2
 800216a:	d1f0      	bne.n	800214e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800216c:	4b48      	ldr	r3, [pc, #288]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4a4c      	ldr	r2, [pc, #304]	; (80022a4 <HAL_RCC_OscConfig+0x618>)
 8002172:	4013      	ands	r3, r2
 8002174:	0019      	movs	r1, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1a      	ldr	r2, [r3, #32]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	431a      	orrs	r2, r3
 8002194:	4b3e      	ldr	r3, [pc, #248]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 8002196:	430a      	orrs	r2, r1
 8002198:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800219a:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	4b3c      	ldr	r3, [pc, #240]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 80021a0:	2180      	movs	r1, #128	; 0x80
 80021a2:	0449      	lsls	r1, r1, #17
 80021a4:	430a      	orrs	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80021a8:	4b39      	ldr	r3, [pc, #228]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	4b38      	ldr	r3, [pc, #224]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 80021ae:	2180      	movs	r1, #128	; 0x80
 80021b0:	0549      	lsls	r1, r1, #21
 80021b2:	430a      	orrs	r2, r1
 80021b4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b6:	f7fe fc55 	bl	8000a64 <HAL_GetTick>
 80021ba:	0003      	movs	r3, r0
 80021bc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c0:	f7fe fc50 	bl	8000a64 <HAL_GetTick>
 80021c4:	0002      	movs	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e059      	b.n	8002286 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d2:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	049b      	lsls	r3, r3, #18
 80021da:	4013      	ands	r3, r2
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x534>
 80021de:	e051      	b.n	8002284 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e0:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 80021e6:	492e      	ldr	r1, [pc, #184]	; (80022a0 <HAL_RCC_OscConfig+0x614>)
 80021e8:	400a      	ands	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7fe fc3a 	bl	8000a64 <HAL_GetTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f6:	f7fe fc35 	bl	8000a64 <HAL_GetTick>
 80021fa:	0002      	movs	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e03e      	b.n	8002286 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	049b      	lsls	r3, r3, #18
 8002210:	4013      	ands	r3, r2
 8002212:	d1f0      	bne.n	80021f6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002214:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 800221a:	4923      	ldr	r1, [pc, #140]	; (80022a8 <HAL_RCC_OscConfig+0x61c>)
 800221c:	400a      	ands	r2, r1
 800221e:	60da      	str	r2, [r3, #12]
 8002220:	e030      	b.n	8002284 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e02b      	b.n	8002286 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800222e:	4b18      	ldr	r3, [pc, #96]	; (8002290 <HAL_RCC_OscConfig+0x604>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2203      	movs	r2, #3
 8002238:	401a      	ands	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	429a      	cmp	r2, r3
 8002240:	d11e      	bne.n	8002280 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2270      	movs	r2, #112	; 0x70
 8002246:	401a      	ands	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224c:	429a      	cmp	r2, r3
 800224e:	d117      	bne.n	8002280 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	23fe      	movs	r3, #254	; 0xfe
 8002254:	01db      	lsls	r3, r3, #7
 8002256:	401a      	ands	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800225e:	429a      	cmp	r2, r3
 8002260:	d10e      	bne.n	8002280 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	23f8      	movs	r3, #248	; 0xf8
 8002266:	039b      	lsls	r3, r3, #14
 8002268:	401a      	ands	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800226e:	429a      	cmp	r2, r3
 8002270:	d106      	bne.n	8002280 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	0f5b      	lsrs	r3, r3, #29
 8002276:	075a      	lsls	r2, r3, #29
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	0018      	movs	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	b008      	add	sp, #32
 800228c:	bd80      	pop	{r7, pc}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	40021000 	.word	0x40021000
 8002294:	40007000 	.word	0x40007000
 8002298:	00001388 	.word	0x00001388
 800229c:	efffffff 	.word	0xefffffff
 80022a0:	feffffff 	.word	0xfeffffff
 80022a4:	1fc1808c 	.word	0x1fc1808c
 80022a8:	effefffc 	.word	0xeffefffc

080022ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0e9      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c0:	4b76      	ldr	r3, [pc, #472]	; (800249c <HAL_RCC_ClockConfig+0x1f0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2207      	movs	r2, #7
 80022c6:	4013      	ands	r3, r2
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d91e      	bls.n	800230c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b73      	ldr	r3, [pc, #460]	; (800249c <HAL_RCC_ClockConfig+0x1f0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2207      	movs	r2, #7
 80022d4:	4393      	bics	r3, r2
 80022d6:	0019      	movs	r1, r3
 80022d8:	4b70      	ldr	r3, [pc, #448]	; (800249c <HAL_RCC_ClockConfig+0x1f0>)
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022e0:	f7fe fbc0 	bl	8000a64 <HAL_GetTick>
 80022e4:	0003      	movs	r3, r0
 80022e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022e8:	e009      	b.n	80022fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ea:	f7fe fbbb 	bl	8000a64 <HAL_GetTick>
 80022ee:	0002      	movs	r2, r0
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	4a6a      	ldr	r2, [pc, #424]	; (80024a0 <HAL_RCC_ClockConfig+0x1f4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e0ca      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022fe:	4b67      	ldr	r3, [pc, #412]	; (800249c <HAL_RCC_ClockConfig+0x1f0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2207      	movs	r2, #7
 8002304:	4013      	ands	r3, r2
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d1ee      	bne.n	80022ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2202      	movs	r2, #2
 8002312:	4013      	ands	r3, r2
 8002314:	d015      	beq.n	8002342 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2204      	movs	r2, #4
 800231c:	4013      	ands	r3, r2
 800231e:	d006      	beq.n	800232e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002320:	4b60      	ldr	r3, [pc, #384]	; (80024a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	4b5f      	ldr	r3, [pc, #380]	; (80024a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002326:	21e0      	movs	r1, #224	; 0xe0
 8002328:	01c9      	lsls	r1, r1, #7
 800232a:	430a      	orrs	r2, r1
 800232c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232e:	4b5d      	ldr	r3, [pc, #372]	; (80024a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	4a5d      	ldr	r2, [pc, #372]	; (80024a8 <HAL_RCC_ClockConfig+0x1fc>)
 8002334:	4013      	ands	r3, r2
 8002336:	0019      	movs	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	4b59      	ldr	r3, [pc, #356]	; (80024a4 <HAL_RCC_ClockConfig+0x1f8>)
 800233e:	430a      	orrs	r2, r1
 8002340:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2201      	movs	r2, #1
 8002348:	4013      	ands	r3, r2
 800234a:	d057      	beq.n	80023fc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d107      	bne.n	8002364 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	029b      	lsls	r3, r3, #10
 800235c:	4013      	ands	r3, r2
 800235e:	d12b      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e097      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d107      	bne.n	800237c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236c:	4b4d      	ldr	r3, [pc, #308]	; (80024a4 <HAL_RCC_ClockConfig+0x1f8>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	049b      	lsls	r3, r3, #18
 8002374:	4013      	ands	r3, r2
 8002376:	d11f      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e08b      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d107      	bne.n	8002394 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002384:	4b47      	ldr	r3, [pc, #284]	; (80024a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4013      	ands	r3, r2
 800238e:	d113      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e07f      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b03      	cmp	r3, #3
 800239a:	d106      	bne.n	80023aa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800239c:	4b41      	ldr	r3, [pc, #260]	; (80024a4 <HAL_RCC_ClockConfig+0x1f8>)
 800239e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a0:	2202      	movs	r2, #2
 80023a2:	4013      	ands	r3, r2
 80023a4:	d108      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e074      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023aa:	4b3e      	ldr	r3, [pc, #248]	; (80024a4 <HAL_RCC_ClockConfig+0x1f8>)
 80023ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ae:	2202      	movs	r2, #2
 80023b0:	4013      	ands	r3, r2
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e06d      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023b8:	4b3a      	ldr	r3, [pc, #232]	; (80024a4 <HAL_RCC_ClockConfig+0x1f8>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2207      	movs	r2, #7
 80023be:	4393      	bics	r3, r2
 80023c0:	0019      	movs	r1, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <HAL_RCC_ClockConfig+0x1f8>)
 80023c8:	430a      	orrs	r2, r1
 80023ca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023cc:	f7fe fb4a 	bl	8000a64 <HAL_GetTick>
 80023d0:	0003      	movs	r3, r0
 80023d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d4:	e009      	b.n	80023ea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d6:	f7fe fb45 	bl	8000a64 <HAL_GetTick>
 80023da:	0002      	movs	r2, r0
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	4a2f      	ldr	r2, [pc, #188]	; (80024a0 <HAL_RCC_ClockConfig+0x1f4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e054      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ea:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <HAL_RCC_ClockConfig+0x1f8>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2238      	movs	r2, #56	; 0x38
 80023f0:	401a      	ands	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d1ec      	bne.n	80023d6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023fc:	4b27      	ldr	r3, [pc, #156]	; (800249c <HAL_RCC_ClockConfig+0x1f0>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2207      	movs	r2, #7
 8002402:	4013      	ands	r3, r2
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d21e      	bcs.n	8002448 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240a:	4b24      	ldr	r3, [pc, #144]	; (800249c <HAL_RCC_ClockConfig+0x1f0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2207      	movs	r2, #7
 8002410:	4393      	bics	r3, r2
 8002412:	0019      	movs	r1, r3
 8002414:	4b21      	ldr	r3, [pc, #132]	; (800249c <HAL_RCC_ClockConfig+0x1f0>)
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800241c:	f7fe fb22 	bl	8000a64 <HAL_GetTick>
 8002420:	0003      	movs	r3, r0
 8002422:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002424:	e009      	b.n	800243a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002426:	f7fe fb1d 	bl	8000a64 <HAL_GetTick>
 800242a:	0002      	movs	r2, r0
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <HAL_RCC_ClockConfig+0x1f4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e02c      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800243a:	4b18      	ldr	r3, [pc, #96]	; (800249c <HAL_RCC_ClockConfig+0x1f0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2207      	movs	r2, #7
 8002440:	4013      	ands	r3, r2
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d1ee      	bne.n	8002426 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2204      	movs	r2, #4
 800244e:	4013      	ands	r3, r2
 8002450:	d009      	beq.n	8002466 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002452:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	4a15      	ldr	r2, [pc, #84]	; (80024ac <HAL_RCC_ClockConfig+0x200>)
 8002458:	4013      	ands	r3, r2
 800245a:	0019      	movs	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <HAL_RCC_ClockConfig+0x1f8>)
 8002462:	430a      	orrs	r2, r1
 8002464:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002466:	f000 f829 	bl	80024bc <HAL_RCC_GetSysClockFreq>
 800246a:	0001      	movs	r1, r0
 800246c:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <HAL_RCC_ClockConfig+0x1f8>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	220f      	movs	r2, #15
 8002474:	401a      	ands	r2, r3
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_RCC_ClockConfig+0x204>)
 8002478:	0092      	lsls	r2, r2, #2
 800247a:	58d3      	ldr	r3, [r2, r3]
 800247c:	221f      	movs	r2, #31
 800247e:	4013      	ands	r3, r2
 8002480:	000a      	movs	r2, r1
 8002482:	40da      	lsrs	r2, r3
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_RCC_ClockConfig+0x208>)
 8002486:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_RCC_ClockConfig+0x20c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	0018      	movs	r0, r3
 800248e:	f7fe fa8d 	bl	80009ac <HAL_InitTick>
 8002492:	0003      	movs	r3, r0
}
 8002494:	0018      	movs	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	b004      	add	sp, #16
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40022000 	.word	0x40022000
 80024a0:	00001388 	.word	0x00001388
 80024a4:	40021000 	.word	0x40021000
 80024a8:	fffff0ff 	.word	0xfffff0ff
 80024ac:	ffff8fff 	.word	0xffff8fff
 80024b0:	080056f0 	.word	0x080056f0
 80024b4:	20000000 	.word	0x20000000
 80024b8:	20000004 	.word	0x20000004

080024bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024c2:	4b3c      	ldr	r3, [pc, #240]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2238      	movs	r2, #56	; 0x38
 80024c8:	4013      	ands	r3, r2
 80024ca:	d10f      	bne.n	80024ec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80024cc:	4b39      	ldr	r3, [pc, #228]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0adb      	lsrs	r3, r3, #11
 80024d2:	2207      	movs	r2, #7
 80024d4:	4013      	ands	r3, r2
 80024d6:	2201      	movs	r2, #1
 80024d8:	409a      	lsls	r2, r3
 80024da:	0013      	movs	r3, r2
 80024dc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80024de:	6839      	ldr	r1, [r7, #0]
 80024e0:	4835      	ldr	r0, [pc, #212]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80024e2:	f7fd fe0d 	bl	8000100 <__udivsi3>
 80024e6:	0003      	movs	r3, r0
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	e05d      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024ec:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2238      	movs	r2, #56	; 0x38
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d102      	bne.n	80024fe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024f8:	4b30      	ldr	r3, [pc, #192]	; (80025bc <HAL_RCC_GetSysClockFreq+0x100>)
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	e054      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024fe:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2238      	movs	r2, #56	; 0x38
 8002504:	4013      	ands	r3, r2
 8002506:	2b10      	cmp	r3, #16
 8002508:	d138      	bne.n	800257c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800250a:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2203      	movs	r2, #3
 8002510:	4013      	ands	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	2207      	movs	r2, #7
 800251c:	4013      	ands	r3, r2
 800251e:	3301      	adds	r3, #1
 8002520:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d10d      	bne.n	8002544 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	4824      	ldr	r0, [pc, #144]	; (80025bc <HAL_RCC_GetSysClockFreq+0x100>)
 800252c:	f7fd fde8 	bl	8000100 <__udivsi3>
 8002530:	0003      	movs	r3, r0
 8002532:	0019      	movs	r1, r3
 8002534:	4b1f      	ldr	r3, [pc, #124]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	227f      	movs	r2, #127	; 0x7f
 800253c:	4013      	ands	r3, r2
 800253e:	434b      	muls	r3, r1
 8002540:	617b      	str	r3, [r7, #20]
        break;
 8002542:	e00d      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	481c      	ldr	r0, [pc, #112]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002548:	f7fd fdda 	bl	8000100 <__udivsi3>
 800254c:	0003      	movs	r3, r0
 800254e:	0019      	movs	r1, r3
 8002550:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	227f      	movs	r2, #127	; 0x7f
 8002558:	4013      	ands	r3, r2
 800255a:	434b      	muls	r3, r1
 800255c:	617b      	str	r3, [r7, #20]
        break;
 800255e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002560:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	0f5b      	lsrs	r3, r3, #29
 8002566:	2207      	movs	r2, #7
 8002568:	4013      	ands	r3, r2
 800256a:	3301      	adds	r3, #1
 800256c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	6978      	ldr	r0, [r7, #20]
 8002572:	f7fd fdc5 	bl	8000100 <__udivsi3>
 8002576:	0003      	movs	r3, r0
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	e015      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800257c:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2238      	movs	r2, #56	; 0x38
 8002582:	4013      	ands	r3, r2
 8002584:	2b20      	cmp	r3, #32
 8002586:	d103      	bne.n	8002590 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	e00b      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2238      	movs	r2, #56	; 0x38
 8002596:	4013      	ands	r3, r2
 8002598:	2b18      	cmp	r3, #24
 800259a:	d103      	bne.n	80025a4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800259c:	23fa      	movs	r3, #250	; 0xfa
 800259e:	01db      	lsls	r3, r3, #7
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	e001      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025a8:	693b      	ldr	r3, [r7, #16]
}
 80025aa:	0018      	movs	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b006      	add	sp, #24
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	40021000 	.word	0x40021000
 80025b8:	00f42400 	.word	0x00f42400
 80025bc:	007a1200 	.word	0x007a1200

080025c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80025c8:	2313      	movs	r3, #19
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025d0:	2312      	movs	r3, #18
 80025d2:	18fb      	adds	r3, r7, r3
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	029b      	lsls	r3, r3, #10
 80025e0:	4013      	ands	r3, r2
 80025e2:	d100      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80025e4:	e0a3      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e6:	2011      	movs	r0, #17
 80025e8:	183b      	adds	r3, r7, r0
 80025ea:	2200      	movs	r2, #0
 80025ec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ee:	4b7f      	ldr	r3, [pc, #508]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	055b      	lsls	r3, r3, #21
 80025f6:	4013      	ands	r3, r2
 80025f8:	d110      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fa:	4b7c      	ldr	r3, [pc, #496]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025fe:	4b7b      	ldr	r3, [pc, #492]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002600:	2180      	movs	r1, #128	; 0x80
 8002602:	0549      	lsls	r1, r1, #21
 8002604:	430a      	orrs	r2, r1
 8002606:	63da      	str	r2, [r3, #60]	; 0x3c
 8002608:	4b78      	ldr	r3, [pc, #480]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800260a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	055b      	lsls	r3, r3, #21
 8002610:	4013      	ands	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002616:	183b      	adds	r3, r7, r0
 8002618:	2201      	movs	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800261c:	4b74      	ldr	r3, [pc, #464]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b73      	ldr	r3, [pc, #460]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002622:	2180      	movs	r1, #128	; 0x80
 8002624:	0049      	lsls	r1, r1, #1
 8002626:	430a      	orrs	r2, r1
 8002628:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800262a:	f7fe fa1b 	bl	8000a64 <HAL_GetTick>
 800262e:	0003      	movs	r3, r0
 8002630:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002632:	e00b      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002634:	f7fe fa16 	bl	8000a64 <HAL_GetTick>
 8002638:	0002      	movs	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d904      	bls.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002642:	2313      	movs	r3, #19
 8002644:	18fb      	adds	r3, r7, r3
 8002646:	2203      	movs	r2, #3
 8002648:	701a      	strb	r2, [r3, #0]
        break;
 800264a:	e005      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800264c:	4b68      	ldr	r3, [pc, #416]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4013      	ands	r3, r2
 8002656:	d0ed      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002658:	2313      	movs	r3, #19
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d154      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002662:	4b62      	ldr	r3, [pc, #392]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002664:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002666:	23c0      	movs	r3, #192	; 0xc0
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4013      	ands	r3, r2
 800266c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d019      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	429a      	cmp	r2, r3
 800267c:	d014      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800267e:	4b5b      	ldr	r3, [pc, #364]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002682:	4a5c      	ldr	r2, [pc, #368]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002684:	4013      	ands	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002688:	4b58      	ldr	r3, [pc, #352]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800268a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800268c:	4b57      	ldr	r3, [pc, #348]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800268e:	2180      	movs	r1, #128	; 0x80
 8002690:	0249      	lsls	r1, r1, #9
 8002692:	430a      	orrs	r2, r1
 8002694:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002696:	4b55      	ldr	r3, [pc, #340]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002698:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800269a:	4b54      	ldr	r3, [pc, #336]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800269c:	4956      	ldr	r1, [pc, #344]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800269e:	400a      	ands	r2, r1
 80026a0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026a2:	4b52      	ldr	r3, [pc, #328]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2201      	movs	r2, #1
 80026ac:	4013      	ands	r3, r2
 80026ae:	d016      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7fe f9d8 	bl	8000a64 <HAL_GetTick>
 80026b4:	0003      	movs	r3, r0
 80026b6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b8:	e00c      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7fe f9d3 	bl	8000a64 <HAL_GetTick>
 80026be:	0002      	movs	r2, r0
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	4a4d      	ldr	r2, [pc, #308]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d904      	bls.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80026ca:	2313      	movs	r3, #19
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	2203      	movs	r2, #3
 80026d0:	701a      	strb	r2, [r3, #0]
            break;
 80026d2:	e004      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d4:	4b45      	ldr	r3, [pc, #276]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d8:	2202      	movs	r2, #2
 80026da:	4013      	ands	r3, r2
 80026dc:	d0ed      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80026de:	2313      	movs	r3, #19
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10a      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026e8:	4b40      	ldr	r3, [pc, #256]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ec:	4a41      	ldr	r2, [pc, #260]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	4b3d      	ldr	r3, [pc, #244]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026f8:	430a      	orrs	r2, r1
 80026fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80026fc:	e00c      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026fe:	2312      	movs	r3, #18
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	2213      	movs	r2, #19
 8002704:	18ba      	adds	r2, r7, r2
 8002706:	7812      	ldrb	r2, [r2, #0]
 8002708:	701a      	strb	r2, [r3, #0]
 800270a:	e005      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800270c:	2312      	movs	r3, #18
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	2213      	movs	r2, #19
 8002712:	18ba      	adds	r2, r7, r2
 8002714:	7812      	ldrb	r2, [r2, #0]
 8002716:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002718:	2311      	movs	r3, #17
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d105      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002722:	4b32      	ldr	r3, [pc, #200]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002724:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002726:	4b31      	ldr	r3, [pc, #196]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002728:	4935      	ldr	r1, [pc, #212]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800272a:	400a      	ands	r2, r1
 800272c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2201      	movs	r2, #1
 8002734:	4013      	ands	r3, r2
 8002736:	d009      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002738:	4b2c      	ldr	r3, [pc, #176]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800273a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273c:	2203      	movs	r2, #3
 800273e:	4393      	bics	r3, r2
 8002740:	0019      	movs	r1, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	4b29      	ldr	r3, [pc, #164]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002748:	430a      	orrs	r2, r1
 800274a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2220      	movs	r2, #32
 8002752:	4013      	ands	r3, r2
 8002754:	d009      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002756:	4b25      	ldr	r3, [pc, #148]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275a:	4a2a      	ldr	r2, [pc, #168]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800275c:	4013      	ands	r3, r2
 800275e:	0019      	movs	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	4b21      	ldr	r3, [pc, #132]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002766:	430a      	orrs	r2, r1
 8002768:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	01db      	lsls	r3, r3, #7
 8002772:	4013      	ands	r3, r2
 8002774:	d015      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002776:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	0899      	lsrs	r1, r3, #2
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691a      	ldr	r2, [r3, #16]
 8002782:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002784:	430a      	orrs	r2, r1
 8002786:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	05db      	lsls	r3, r3, #23
 8002790:	429a      	cmp	r2, r3
 8002792:	d106      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002794:	4b15      	ldr	r3, [pc, #84]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	4b14      	ldr	r3, [pc, #80]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800279a:	2180      	movs	r1, #128	; 0x80
 800279c:	0249      	lsls	r1, r1, #9
 800279e:	430a      	orrs	r2, r1
 80027a0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	4013      	ands	r3, r2
 80027ac:	d016      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80027ae:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b2:	4a15      	ldr	r2, [pc, #84]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027be:	430a      	orrs	r2, r1
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	01db      	lsls	r3, r3, #7
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d106      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80027ce:	4b07      	ldr	r3, [pc, #28]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027d4:	2180      	movs	r1, #128	; 0x80
 80027d6:	0249      	lsls	r1, r1, #9
 80027d8:	430a      	orrs	r2, r1
 80027da:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80027dc:	2312      	movs	r3, #18
 80027de:	18fb      	adds	r3, r7, r3
 80027e0:	781b      	ldrb	r3, [r3, #0]
}
 80027e2:	0018      	movs	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b006      	add	sp, #24
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40007000 	.word	0x40007000
 80027f4:	fffffcff 	.word	0xfffffcff
 80027f8:	fffeffff 	.word	0xfffeffff
 80027fc:	00001388 	.word	0x00001388
 8002800:	efffffff 	.word	0xefffffff
 8002804:	ffffcfff 	.word	0xffffcfff
 8002808:	ffff3fff 	.word	0xffff3fff

0800280c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e04a      	b.n	80028b4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	223d      	movs	r2, #61	; 0x3d
 8002822:	5c9b      	ldrb	r3, [r3, r2]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d107      	bne.n	800283a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	223c      	movs	r2, #60	; 0x3c
 800282e:	2100      	movs	r1, #0
 8002830:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	0018      	movs	r0, r3
 8002836:	f7fd fff5 	bl	8000824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	223d      	movs	r2, #61	; 0x3d
 800283e:	2102      	movs	r1, #2
 8002840:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3304      	adds	r3, #4
 800284a:	0019      	movs	r1, r3
 800284c:	0010      	movs	r0, r2
 800284e:	f000 fa6b 	bl	8002d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2248      	movs	r2, #72	; 0x48
 8002856:	2101      	movs	r1, #1
 8002858:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	223e      	movs	r2, #62	; 0x3e
 800285e:	2101      	movs	r1, #1
 8002860:	5499      	strb	r1, [r3, r2]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	223f      	movs	r2, #63	; 0x3f
 8002866:	2101      	movs	r1, #1
 8002868:	5499      	strb	r1, [r3, r2]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2240      	movs	r2, #64	; 0x40
 800286e:	2101      	movs	r1, #1
 8002870:	5499      	strb	r1, [r3, r2]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2241      	movs	r2, #65	; 0x41
 8002876:	2101      	movs	r1, #1
 8002878:	5499      	strb	r1, [r3, r2]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2242      	movs	r2, #66	; 0x42
 800287e:	2101      	movs	r1, #1
 8002880:	5499      	strb	r1, [r3, r2]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2243      	movs	r2, #67	; 0x43
 8002886:	2101      	movs	r1, #1
 8002888:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2244      	movs	r2, #68	; 0x44
 800288e:	2101      	movs	r1, #1
 8002890:	5499      	strb	r1, [r3, r2]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2245      	movs	r2, #69	; 0x45
 8002896:	2101      	movs	r1, #1
 8002898:	5499      	strb	r1, [r3, r2]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2246      	movs	r2, #70	; 0x46
 800289e:	2101      	movs	r1, #1
 80028a0:	5499      	strb	r1, [r3, r2]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2247      	movs	r2, #71	; 0x47
 80028a6:	2101      	movs	r1, #1
 80028a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	223d      	movs	r2, #61	; 0x3d
 80028ae:	2101      	movs	r1, #1
 80028b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b002      	add	sp, #8
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e04a      	b.n	8002964 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	223d      	movs	r2, #61	; 0x3d
 80028d2:	5c9b      	ldrb	r3, [r3, r2]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d107      	bne.n	80028ea <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	223c      	movs	r2, #60	; 0x3c
 80028de:	2100      	movs	r1, #0
 80028e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f000 f841 	bl	800296c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	223d      	movs	r2, #61	; 0x3d
 80028ee:	2102      	movs	r1, #2
 80028f0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3304      	adds	r3, #4
 80028fa:	0019      	movs	r1, r3
 80028fc:	0010      	movs	r0, r2
 80028fe:	f000 fa13 	bl	8002d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2248      	movs	r2, #72	; 0x48
 8002906:	2101      	movs	r1, #1
 8002908:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	223e      	movs	r2, #62	; 0x3e
 800290e:	2101      	movs	r1, #1
 8002910:	5499      	strb	r1, [r3, r2]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	223f      	movs	r2, #63	; 0x3f
 8002916:	2101      	movs	r1, #1
 8002918:	5499      	strb	r1, [r3, r2]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2240      	movs	r2, #64	; 0x40
 800291e:	2101      	movs	r1, #1
 8002920:	5499      	strb	r1, [r3, r2]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2241      	movs	r2, #65	; 0x41
 8002926:	2101      	movs	r1, #1
 8002928:	5499      	strb	r1, [r3, r2]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2242      	movs	r2, #66	; 0x42
 800292e:	2101      	movs	r1, #1
 8002930:	5499      	strb	r1, [r3, r2]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2243      	movs	r2, #67	; 0x43
 8002936:	2101      	movs	r1, #1
 8002938:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2244      	movs	r2, #68	; 0x44
 800293e:	2101      	movs	r1, #1
 8002940:	5499      	strb	r1, [r3, r2]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2245      	movs	r2, #69	; 0x45
 8002946:	2101      	movs	r1, #1
 8002948:	5499      	strb	r1, [r3, r2]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2246      	movs	r2, #70	; 0x46
 800294e:	2101      	movs	r1, #1
 8002950:	5499      	strb	r1, [r3, r2]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2247      	movs	r2, #71	; 0x47
 8002956:	2101      	movs	r1, #1
 8002958:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	223d      	movs	r2, #61	; 0x3d
 800295e:	2101      	movs	r1, #1
 8002960:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	b002      	add	sp, #8
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	b002      	add	sp, #8
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002988:	2317      	movs	r3, #23
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	223c      	movs	r2, #60	; 0x3c
 8002994:	5c9b      	ldrb	r3, [r3, r2]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_TIM_PWM_ConfigChannel+0x22>
 800299a:	2302      	movs	r3, #2
 800299c:	e0e5      	b.n	8002b6a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	223c      	movs	r2, #60	; 0x3c
 80029a2:	2101      	movs	r1, #1
 80029a4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b14      	cmp	r3, #20
 80029aa:	d900      	bls.n	80029ae <HAL_TIM_PWM_ConfigChannel+0x32>
 80029ac:	e0d1      	b.n	8002b52 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	009a      	lsls	r2, r3, #2
 80029b2:	4b70      	ldr	r3, [pc, #448]	; (8002b74 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80029b4:	18d3      	adds	r3, r2, r3
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	0011      	movs	r1, r2
 80029c2:	0018      	movs	r0, r3
 80029c4:	f000 fa1c 	bl	8002e00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699a      	ldr	r2, [r3, #24]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2108      	movs	r1, #8
 80029d4:	430a      	orrs	r2, r1
 80029d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2104      	movs	r1, #4
 80029e4:	438a      	bics	r2, r1
 80029e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6999      	ldr	r1, [r3, #24]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	619a      	str	r2, [r3, #24]
      break;
 80029fa:	e0af      	b.n	8002b5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	0011      	movs	r1, r2
 8002a04:	0018      	movs	r0, r3
 8002a06:	f000 fa7b 	bl	8002f00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699a      	ldr	r2, [r3, #24]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2180      	movs	r1, #128	; 0x80
 8002a16:	0109      	lsls	r1, r1, #4
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4954      	ldr	r1, [pc, #336]	; (8002b78 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002a28:	400a      	ands	r2, r1
 8002a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6999      	ldr	r1, [r3, #24]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	021a      	lsls	r2, r3, #8
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	619a      	str	r2, [r3, #24]
      break;
 8002a40:	e08c      	b.n	8002b5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	0011      	movs	r1, r2
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f000 fad6 	bl	8002ffc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69da      	ldr	r2, [r3, #28]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2108      	movs	r1, #8
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	69da      	ldr	r2, [r3, #28]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2104      	movs	r1, #4
 8002a6c:	438a      	bics	r2, r1
 8002a6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69d9      	ldr	r1, [r3, #28]
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	61da      	str	r2, [r3, #28]
      break;
 8002a82:	e06b      	b.n	8002b5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	0011      	movs	r1, r2
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f000 fb37 	bl	8003100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	69da      	ldr	r2, [r3, #28]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2180      	movs	r1, #128	; 0x80
 8002a9e:	0109      	lsls	r1, r1, #4
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	69da      	ldr	r2, [r3, #28]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4932      	ldr	r1, [pc, #200]	; (8002b78 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002ab0:	400a      	ands	r2, r1
 8002ab2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69d9      	ldr	r1, [r3, #28]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	021a      	lsls	r2, r3, #8
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	61da      	str	r2, [r3, #28]
      break;
 8002ac8:	e048      	b.n	8002b5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	0011      	movs	r1, r2
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f000 fb78 	bl	80031c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2108      	movs	r1, #8
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2104      	movs	r1, #4
 8002af4:	438a      	bics	r2, r1
 8002af6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b0a:	e027      	b.n	8002b5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	0011      	movs	r1, r2
 8002b14:	0018      	movs	r0, r3
 8002b16:	f000 fbb1 	bl	800327c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	0109      	lsls	r1, r1, #4
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4910      	ldr	r1, [pc, #64]	; (8002b78 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002b38:	400a      	ands	r2, r1
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	021a      	lsls	r2, r3, #8
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b50:	e004      	b.n	8002b5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002b52:	2317      	movs	r3, #23
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]
      break;
 8002b5a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	223c      	movs	r2, #60	; 0x3c
 8002b60:	2100      	movs	r1, #0
 8002b62:	5499      	strb	r1, [r3, r2]

  return status;
 8002b64:	2317      	movs	r3, #23
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	781b      	ldrb	r3, [r3, #0]
}
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b006      	add	sp, #24
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	08005730 	.word	0x08005730
 8002b78:	fffffbff 	.word	0xfffffbff

08002b7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b86:	230f      	movs	r3, #15
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	223c      	movs	r2, #60	; 0x3c
 8002b92:	5c9b      	ldrb	r3, [r3, r2]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_TIM_ConfigClockSource+0x20>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e0bc      	b.n	8002d16 <HAL_TIM_ConfigClockSource+0x19a>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	223c      	movs	r2, #60	; 0x3c
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	223d      	movs	r2, #61	; 0x3d
 8002ba8:	2102      	movs	r1, #2
 8002baa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4a5a      	ldr	r2, [pc, #360]	; (8002d20 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4a59      	ldr	r2, [pc, #356]	; (8002d24 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2280      	movs	r2, #128	; 0x80
 8002bd2:	0192      	lsls	r2, r2, #6
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d040      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0xde>
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	0192      	lsls	r2, r2, #6
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d900      	bls.n	8002be2 <HAL_TIM_ConfigClockSource+0x66>
 8002be0:	e088      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x178>
 8002be2:	2280      	movs	r2, #128	; 0x80
 8002be4:	0152      	lsls	r2, r2, #5
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d100      	bne.n	8002bec <HAL_TIM_ConfigClockSource+0x70>
 8002bea:	e088      	b.n	8002cfe <HAL_TIM_ConfigClockSource+0x182>
 8002bec:	2280      	movs	r2, #128	; 0x80
 8002bee:	0152      	lsls	r2, r2, #5
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d900      	bls.n	8002bf6 <HAL_TIM_ConfigClockSource+0x7a>
 8002bf4:	e07e      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x178>
 8002bf6:	2b70      	cmp	r3, #112	; 0x70
 8002bf8:	d018      	beq.n	8002c2c <HAL_TIM_ConfigClockSource+0xb0>
 8002bfa:	d900      	bls.n	8002bfe <HAL_TIM_ConfigClockSource+0x82>
 8002bfc:	e07a      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x178>
 8002bfe:	2b60      	cmp	r3, #96	; 0x60
 8002c00:	d04f      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0x126>
 8002c02:	d900      	bls.n	8002c06 <HAL_TIM_ConfigClockSource+0x8a>
 8002c04:	e076      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x178>
 8002c06:	2b50      	cmp	r3, #80	; 0x50
 8002c08:	d03b      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0x106>
 8002c0a:	d900      	bls.n	8002c0e <HAL_TIM_ConfigClockSource+0x92>
 8002c0c:	e072      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x178>
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d057      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x146>
 8002c12:	d900      	bls.n	8002c16 <HAL_TIM_ConfigClockSource+0x9a>
 8002c14:	e06e      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x178>
 8002c16:	2b30      	cmp	r3, #48	; 0x30
 8002c18:	d063      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x166>
 8002c1a:	d86b      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x178>
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d060      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x166>
 8002c20:	d868      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x178>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d05d      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x166>
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d05b      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x166>
 8002c2a:	e063      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	6899      	ldr	r1, [r3, #8]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f000 fbf8 	bl	8003430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2277      	movs	r2, #119	; 0x77
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	609a      	str	r2, [r3, #8]
      break;
 8002c58:	e052      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6899      	ldr	r1, [r3, #8]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f000 fbe1 	bl	8003430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2180      	movs	r1, #128	; 0x80
 8002c7a:	01c9      	lsls	r1, r1, #7
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	609a      	str	r2, [r3, #8]
      break;
 8002c80:	e03e      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6859      	ldr	r1, [r3, #4]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	001a      	movs	r2, r3
 8002c90:	f000 fb52 	bl	8003338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2150      	movs	r1, #80	; 0x50
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f000 fbac 	bl	80033f8 <TIM_ITRx_SetConfig>
      break;
 8002ca0:	e02e      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6859      	ldr	r1, [r3, #4]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	001a      	movs	r2, r3
 8002cb0:	f000 fb70 	bl	8003394 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2160      	movs	r1, #96	; 0x60
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f000 fb9c 	bl	80033f8 <TIM_ITRx_SetConfig>
      break;
 8002cc0:	e01e      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6859      	ldr	r1, [r3, #4]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	001a      	movs	r2, r3
 8002cd0:	f000 fb32 	bl	8003338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2140      	movs	r1, #64	; 0x40
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 fb8c 	bl	80033f8 <TIM_ITRx_SetConfig>
      break;
 8002ce0:	e00e      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	0019      	movs	r1, r3
 8002cec:	0010      	movs	r0, r2
 8002cee:	f000 fb83 	bl	80033f8 <TIM_ITRx_SetConfig>
      break;
 8002cf2:	e005      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002cf4:	230f      	movs	r3, #15
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	701a      	strb	r2, [r3, #0]
      break;
 8002cfc:	e000      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002cfe:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	223d      	movs	r2, #61	; 0x3d
 8002d04:	2101      	movs	r1, #1
 8002d06:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	223c      	movs	r2, #60	; 0x3c
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	5499      	strb	r1, [r3, r2]

  return status;
 8002d10:	230f      	movs	r3, #15
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	781b      	ldrb	r3, [r3, #0]
}
 8002d16:	0018      	movs	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b004      	add	sp, #16
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	ffceff88 	.word	0xffceff88
 8002d24:	ffff00ff 	.word	0xffff00ff

08002d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a2b      	ldr	r2, [pc, #172]	; (8002de8 <TIM_Base_SetConfig+0xc0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d003      	beq.n	8002d48 <TIM_Base_SetConfig+0x20>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a2a      	ldr	r2, [pc, #168]	; (8002dec <TIM_Base_SetConfig+0xc4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d108      	bne.n	8002d5a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2270      	movs	r2, #112	; 0x70
 8002d4c:	4393      	bics	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a22      	ldr	r2, [pc, #136]	; (8002de8 <TIM_Base_SetConfig+0xc0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00f      	beq.n	8002d82 <TIM_Base_SetConfig+0x5a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a21      	ldr	r2, [pc, #132]	; (8002dec <TIM_Base_SetConfig+0xc4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00b      	beq.n	8002d82 <TIM_Base_SetConfig+0x5a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a20      	ldr	r2, [pc, #128]	; (8002df0 <TIM_Base_SetConfig+0xc8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d007      	beq.n	8002d82 <TIM_Base_SetConfig+0x5a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a1f      	ldr	r2, [pc, #124]	; (8002df4 <TIM_Base_SetConfig+0xcc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d003      	beq.n	8002d82 <TIM_Base_SetConfig+0x5a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a1e      	ldr	r2, [pc, #120]	; (8002df8 <TIM_Base_SetConfig+0xd0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d108      	bne.n	8002d94 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4a1d      	ldr	r2, [pc, #116]	; (8002dfc <TIM_Base_SetConfig+0xd4>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2280      	movs	r2, #128	; 0x80
 8002d98:	4393      	bics	r3, r2
 8002d9a:	001a      	movs	r2, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <TIM_Base_SetConfig+0xc0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d007      	beq.n	8002dd2 <TIM_Base_SetConfig+0xaa>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a0b      	ldr	r2, [pc, #44]	; (8002df4 <TIM_Base_SetConfig+0xcc>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d003      	beq.n	8002dd2 <TIM_Base_SetConfig+0xaa>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <TIM_Base_SetConfig+0xd0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d103      	bne.n	8002dda <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	615a      	str	r2, [r3, #20]
}
 8002de0:	46c0      	nop			; (mov r8, r8)
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b004      	add	sp, #16
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40002000 	.word	0x40002000
 8002df4:	40014400 	.word	0x40014400
 8002df8:	40014800 	.word	0x40014800
 8002dfc:	fffffcff 	.word	0xfffffcff

08002e00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4393      	bics	r3, r2
 8002e12:	001a      	movs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4a2e      	ldr	r2, [pc, #184]	; (8002ee8 <TIM_OC1_SetConfig+0xe8>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2203      	movs	r2, #3
 8002e36:	4393      	bics	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2202      	movs	r2, #2
 8002e48:	4393      	bics	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a24      	ldr	r2, [pc, #144]	; (8002eec <TIM_OC1_SetConfig+0xec>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d007      	beq.n	8002e6e <TIM_OC1_SetConfig+0x6e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a23      	ldr	r2, [pc, #140]	; (8002ef0 <TIM_OC1_SetConfig+0xf0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d003      	beq.n	8002e6e <TIM_OC1_SetConfig+0x6e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a22      	ldr	r2, [pc, #136]	; (8002ef4 <TIM_OC1_SetConfig+0xf4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d10c      	bne.n	8002e88 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2208      	movs	r2, #8
 8002e72:	4393      	bics	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2204      	movs	r2, #4
 8002e84:	4393      	bics	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a18      	ldr	r2, [pc, #96]	; (8002eec <TIM_OC1_SetConfig+0xec>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d007      	beq.n	8002ea0 <TIM_OC1_SetConfig+0xa0>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a17      	ldr	r2, [pc, #92]	; (8002ef0 <TIM_OC1_SetConfig+0xf0>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d003      	beq.n	8002ea0 <TIM_OC1_SetConfig+0xa0>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a16      	ldr	r2, [pc, #88]	; (8002ef4 <TIM_OC1_SetConfig+0xf4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d111      	bne.n	8002ec4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <TIM_OC1_SetConfig+0xf8>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4a14      	ldr	r2, [pc, #80]	; (8002efc <TIM_OC1_SetConfig+0xfc>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	621a      	str	r2, [r3, #32]
}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b006      	add	sp, #24
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	fffeff8f 	.word	0xfffeff8f
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40014400 	.word	0x40014400
 8002ef4:	40014800 	.word	0x40014800
 8002ef8:	fffffeff 	.word	0xfffffeff
 8002efc:	fffffdff 	.word	0xfffffdff

08002f00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	2210      	movs	r2, #16
 8002f10:	4393      	bics	r3, r2
 8002f12:	001a      	movs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4a2c      	ldr	r2, [pc, #176]	; (8002fe0 <TIM_OC2_SetConfig+0xe0>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4a2b      	ldr	r2, [pc, #172]	; (8002fe4 <TIM_OC2_SetConfig+0xe4>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	4393      	bics	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a22      	ldr	r2, [pc, #136]	; (8002fe8 <TIM_OC2_SetConfig+0xe8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d10d      	bne.n	8002f7e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2280      	movs	r2, #128	; 0x80
 8002f66:	4393      	bics	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2240      	movs	r2, #64	; 0x40
 8002f7a:	4393      	bics	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a19      	ldr	r2, [pc, #100]	; (8002fe8 <TIM_OC2_SetConfig+0xe8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d007      	beq.n	8002f96 <TIM_OC2_SetConfig+0x96>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a18      	ldr	r2, [pc, #96]	; (8002fec <TIM_OC2_SetConfig+0xec>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <TIM_OC2_SetConfig+0x96>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a17      	ldr	r2, [pc, #92]	; (8002ff0 <TIM_OC2_SetConfig+0xf0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d113      	bne.n	8002fbe <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4a16      	ldr	r2, [pc, #88]	; (8002ff4 <TIM_OC2_SetConfig+0xf4>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4a15      	ldr	r2, [pc, #84]	; (8002ff8 <TIM_OC2_SetConfig+0xf8>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	621a      	str	r2, [r3, #32]
}
 8002fd8:	46c0      	nop			; (mov r8, r8)
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b006      	add	sp, #24
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	feff8fff 	.word	0xfeff8fff
 8002fe4:	fffffcff 	.word	0xfffffcff
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40014400 	.word	0x40014400
 8002ff0:	40014800 	.word	0x40014800
 8002ff4:	fffffbff 	.word	0xfffffbff
 8002ff8:	fffff7ff 	.word	0xfffff7ff

08002ffc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	4a33      	ldr	r2, [pc, #204]	; (80030d8 <TIM_OC3_SetConfig+0xdc>)
 800300c:	401a      	ands	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a2d      	ldr	r2, [pc, #180]	; (80030dc <TIM_OC3_SetConfig+0xe0>)
 8003028:	4013      	ands	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2203      	movs	r2, #3
 8003030:	4393      	bics	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	4a27      	ldr	r2, [pc, #156]	; (80030e0 <TIM_OC3_SetConfig+0xe4>)
 8003042:	4013      	ands	r3, r2
 8003044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	021b      	lsls	r3, r3, #8
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a23      	ldr	r2, [pc, #140]	; (80030e4 <TIM_OC3_SetConfig+0xe8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d10d      	bne.n	8003076 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	4a22      	ldr	r2, [pc, #136]	; (80030e8 <TIM_OC3_SetConfig+0xec>)
 800305e:	4013      	ands	r3, r2
 8003060:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	4a1e      	ldr	r2, [pc, #120]	; (80030ec <TIM_OC3_SetConfig+0xf0>)
 8003072:	4013      	ands	r3, r2
 8003074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <TIM_OC3_SetConfig+0xe8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d007      	beq.n	800308e <TIM_OC3_SetConfig+0x92>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a1b      	ldr	r2, [pc, #108]	; (80030f0 <TIM_OC3_SetConfig+0xf4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d003      	beq.n	800308e <TIM_OC3_SetConfig+0x92>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a1a      	ldr	r2, [pc, #104]	; (80030f4 <TIM_OC3_SetConfig+0xf8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d113      	bne.n	80030b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <TIM_OC3_SetConfig+0xfc>)
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4a18      	ldr	r2, [pc, #96]	; (80030fc <TIM_OC3_SetConfig+0x100>)
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	621a      	str	r2, [r3, #32]
}
 80030d0:	46c0      	nop			; (mov r8, r8)
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b006      	add	sp, #24
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	fffffeff 	.word	0xfffffeff
 80030dc:	fffeff8f 	.word	0xfffeff8f
 80030e0:	fffffdff 	.word	0xfffffdff
 80030e4:	40012c00 	.word	0x40012c00
 80030e8:	fffff7ff 	.word	0xfffff7ff
 80030ec:	fffffbff 	.word	0xfffffbff
 80030f0:	40014400 	.word	0x40014400
 80030f4:	40014800 	.word	0x40014800
 80030f8:	ffffefff 	.word	0xffffefff
 80030fc:	ffffdfff 	.word	0xffffdfff

08003100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	4a26      	ldr	r2, [pc, #152]	; (80031a8 <TIM_OC4_SetConfig+0xa8>)
 8003110:	401a      	ands	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4a20      	ldr	r2, [pc, #128]	; (80031ac <TIM_OC4_SetConfig+0xac>)
 800312c:	4013      	ands	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4a1f      	ldr	r2, [pc, #124]	; (80031b0 <TIM_OC4_SetConfig+0xb0>)
 8003134:	4013      	ands	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4a1b      	ldr	r2, [pc, #108]	; (80031b4 <TIM_OC4_SetConfig+0xb4>)
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	031b      	lsls	r3, r3, #12
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a17      	ldr	r2, [pc, #92]	; (80031b8 <TIM_OC4_SetConfig+0xb8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d007      	beq.n	8003170 <TIM_OC4_SetConfig+0x70>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a16      	ldr	r2, [pc, #88]	; (80031bc <TIM_OC4_SetConfig+0xbc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d003      	beq.n	8003170 <TIM_OC4_SetConfig+0x70>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a15      	ldr	r2, [pc, #84]	; (80031c0 <TIM_OC4_SetConfig+0xc0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d109      	bne.n	8003184 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	4a14      	ldr	r2, [pc, #80]	; (80031c4 <TIM_OC4_SetConfig+0xc4>)
 8003174:	4013      	ands	r3, r2
 8003176:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	019b      	lsls	r3, r3, #6
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	621a      	str	r2, [r3, #32]
}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b006      	add	sp, #24
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	ffffefff 	.word	0xffffefff
 80031ac:	feff8fff 	.word	0xfeff8fff
 80031b0:	fffffcff 	.word	0xfffffcff
 80031b4:	ffffdfff 	.word	0xffffdfff
 80031b8:	40012c00 	.word	0x40012c00
 80031bc:	40014400 	.word	0x40014400
 80031c0:	40014800 	.word	0x40014800
 80031c4:	ffffbfff 	.word	0xffffbfff

080031c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	4a23      	ldr	r2, [pc, #140]	; (8003264 <TIM_OC5_SetConfig+0x9c>)
 80031d8:	401a      	ands	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4a1d      	ldr	r2, [pc, #116]	; (8003268 <TIM_OC5_SetConfig+0xa0>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4a19      	ldr	r2, [pc, #100]	; (800326c <TIM_OC5_SetConfig+0xa4>)
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	041b      	lsls	r3, r3, #16
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a15      	ldr	r2, [pc, #84]	; (8003270 <TIM_OC5_SetConfig+0xa8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d007      	beq.n	800322e <TIM_OC5_SetConfig+0x66>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a14      	ldr	r2, [pc, #80]	; (8003274 <TIM_OC5_SetConfig+0xac>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <TIM_OC5_SetConfig+0x66>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a13      	ldr	r2, [pc, #76]	; (8003278 <TIM_OC5_SetConfig+0xb0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d109      	bne.n	8003242 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	4a0c      	ldr	r2, [pc, #48]	; (8003264 <TIM_OC5_SetConfig+0x9c>)
 8003232:	4013      	ands	r3, r2
 8003234:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	621a      	str	r2, [r3, #32]
}
 800325c:	46c0      	nop			; (mov r8, r8)
 800325e:	46bd      	mov	sp, r7
 8003260:	b006      	add	sp, #24
 8003262:	bd80      	pop	{r7, pc}
 8003264:	fffeffff 	.word	0xfffeffff
 8003268:	fffeff8f 	.word	0xfffeff8f
 800326c:	fffdffff 	.word	0xfffdffff
 8003270:	40012c00 	.word	0x40012c00
 8003274:	40014400 	.word	0x40014400
 8003278:	40014800 	.word	0x40014800

0800327c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	4a24      	ldr	r2, [pc, #144]	; (800331c <TIM_OC6_SetConfig+0xa0>)
 800328c:	401a      	ands	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <TIM_OC6_SetConfig+0xa4>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4a1a      	ldr	r2, [pc, #104]	; (8003324 <TIM_OC6_SetConfig+0xa8>)
 80032bc:	4013      	ands	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	051b      	lsls	r3, r3, #20
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a16      	ldr	r2, [pc, #88]	; (8003328 <TIM_OC6_SetConfig+0xac>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d007      	beq.n	80032e4 <TIM_OC6_SetConfig+0x68>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a15      	ldr	r2, [pc, #84]	; (800332c <TIM_OC6_SetConfig+0xb0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d003      	beq.n	80032e4 <TIM_OC6_SetConfig+0x68>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a14      	ldr	r2, [pc, #80]	; (8003330 <TIM_OC6_SetConfig+0xb4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d109      	bne.n	80032f8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	4a13      	ldr	r2, [pc, #76]	; (8003334 <TIM_OC6_SetConfig+0xb8>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	029b      	lsls	r3, r3, #10
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	621a      	str	r2, [r3, #32]
}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	46bd      	mov	sp, r7
 8003316:	b006      	add	sp, #24
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	ffefffff 	.word	0xffefffff
 8003320:	feff8fff 	.word	0xfeff8fff
 8003324:	ffdfffff 	.word	0xffdfffff
 8003328:	40012c00 	.word	0x40012c00
 800332c:	40014400 	.word	0x40014400
 8003330:	40014800 	.word	0x40014800
 8003334:	fffbffff 	.word	0xfffbffff

08003338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	2201      	movs	r2, #1
 8003350:	4393      	bics	r3, r2
 8003352:	001a      	movs	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	22f0      	movs	r2, #240	; 0xf0
 8003362:	4393      	bics	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	220a      	movs	r2, #10
 8003374:	4393      	bics	r3, r2
 8003376:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	621a      	str	r2, [r3, #32]
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	b006      	add	sp, #24
 8003392:	bd80      	pop	{r7, pc}

08003394 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	2210      	movs	r2, #16
 80033a6:	4393      	bics	r3, r2
 80033a8:	001a      	movs	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	4a0d      	ldr	r2, [pc, #52]	; (80033f4 <TIM_TI2_ConfigInputStage+0x60>)
 80033be:	4013      	ands	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	031b      	lsls	r3, r3, #12
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	22a0      	movs	r2, #160	; 0xa0
 80033d0:	4393      	bics	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	621a      	str	r2, [r3, #32]
}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b006      	add	sp, #24
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	ffff0fff 	.word	0xffff0fff

080033f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4a08      	ldr	r2, [pc, #32]	; (800342c <TIM_ITRx_SetConfig+0x34>)
 800340c:	4013      	ands	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	2207      	movs	r2, #7
 8003418:	4313      	orrs	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	609a      	str	r2, [r3, #8]
}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	46bd      	mov	sp, r7
 8003426:	b004      	add	sp, #16
 8003428:	bd80      	pop	{r7, pc}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	ffcfff8f 	.word	0xffcfff8f

08003430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	4a09      	ldr	r2, [pc, #36]	; (800346c <TIM_ETR_SetConfig+0x3c>)
 8003448:	4013      	ands	r3, r2
 800344a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	021a      	lsls	r2, r3, #8
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	431a      	orrs	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4313      	orrs	r3, r2
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	4313      	orrs	r3, r2
 800345c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	609a      	str	r2, [r3, #8]
}
 8003464:	46c0      	nop			; (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b006      	add	sp, #24
 800346a:	bd80      	pop	{r7, pc}
 800346c:	ffff00ff 	.word	0xffff00ff

08003470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	223c      	movs	r2, #60	; 0x3c
 800347e:	5c9b      	ldrb	r3, [r3, r2]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003484:	2302      	movs	r3, #2
 8003486:	e04a      	b.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	223c      	movs	r2, #60	; 0x3c
 800348c:	2101      	movs	r1, #1
 800348e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	223d      	movs	r2, #61	; 0x3d
 8003494:	2102      	movs	r1, #2
 8003496:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1e      	ldr	r2, [pc, #120]	; (8003528 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d108      	bne.n	80034c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4a1d      	ldr	r2, [pc, #116]	; (800352c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2270      	movs	r2, #112	; 0x70
 80034c8:	4393      	bics	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a11      	ldr	r2, [pc, #68]	; (8003528 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d004      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a10      	ldr	r2, [pc, #64]	; (8003530 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d10c      	bne.n	800350c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2280      	movs	r2, #128	; 0x80
 80034f6:	4393      	bics	r3, r2
 80034f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	4313      	orrs	r3, r2
 8003502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	223d      	movs	r2, #61	; 0x3d
 8003510:	2101      	movs	r1, #1
 8003512:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	223c      	movs	r2, #60	; 0x3c
 8003518:	2100      	movs	r1, #0
 800351a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	0018      	movs	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	b004      	add	sp, #16
 8003524:	bd80      	pop	{r7, pc}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	40012c00 	.word	0x40012c00
 800352c:	ff0fffff 	.word	0xff0fffff
 8003530:	40000400 	.word	0x40000400

08003534 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	223c      	movs	r2, #60	; 0x3c
 8003546:	5c9b      	ldrb	r3, [r3, r2]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800354c:	2302      	movs	r3, #2
 800354e:	e079      	b.n	8003644 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	223c      	movs	r2, #60	; 0x3c
 8003554:	2101      	movs	r1, #1
 8003556:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	22ff      	movs	r2, #255	; 0xff
 800355c:	4393      	bics	r3, r2
 800355e:	001a      	movs	r2, r3
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4a38      	ldr	r2, [pc, #224]	; (800364c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800356c:	401a      	ands	r2, r3
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4a35      	ldr	r2, [pc, #212]	; (8003650 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800357a:	401a      	ands	r2, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4a33      	ldr	r2, [pc, #204]	; (8003654 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003588:	401a      	ands	r2, r3
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4a30      	ldr	r2, [pc, #192]	; (8003658 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003596:	401a      	ands	r2, r3
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4a2e      	ldr	r2, [pc, #184]	; (800365c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80035a4:	401a      	ands	r2, r3
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4a2b      	ldr	r2, [pc, #172]	; (8003660 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80035b2:	401a      	ands	r2, r3
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4a29      	ldr	r2, [pc, #164]	; (8003664 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80035c0:	401a      	ands	r2, r3
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	041b      	lsls	r3, r3, #16
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a25      	ldr	r2, [pc, #148]	; (8003668 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d106      	bne.n	80035e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4a24      	ldr	r2, [pc, #144]	; (800366c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80035da:	401a      	ands	r2, r3
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1f      	ldr	r2, [pc, #124]	; (8003668 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d121      	bne.n	8003632 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4a1f      	ldr	r2, [pc, #124]	; (8003670 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80035f2:	401a      	ands	r2, r3
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	051b      	lsls	r3, r3, #20
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4a1c      	ldr	r2, [pc, #112]	; (8003674 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8003602:	401a      	ands	r2, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4a1a      	ldr	r2, [pc, #104]	; (8003678 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8003610:	401a      	ands	r2, r3
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a12      	ldr	r2, [pc, #72]	; (8003668 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d106      	bne.n	8003632 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4a15      	ldr	r2, [pc, #84]	; (800367c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8003628:	401a      	ands	r2, r3
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	223c      	movs	r2, #60	; 0x3c
 800363e:	2100      	movs	r1, #0
 8003640:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	0018      	movs	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	b004      	add	sp, #16
 800364a:	bd80      	pop	{r7, pc}
 800364c:	fffffcff 	.word	0xfffffcff
 8003650:	fffffbff 	.word	0xfffffbff
 8003654:	fffff7ff 	.word	0xfffff7ff
 8003658:	ffffefff 	.word	0xffffefff
 800365c:	ffffdfff 	.word	0xffffdfff
 8003660:	ffffbfff 	.word	0xffffbfff
 8003664:	fff0ffff 	.word	0xfff0ffff
 8003668:	40012c00 	.word	0x40012c00
 800366c:	efffffff 	.word	0xefffffff
 8003670:	ff0fffff 	.word	0xff0fffff
 8003674:	feffffff 	.word	0xfeffffff
 8003678:	fdffffff 	.word	0xfdffffff
 800367c:	dfffffff 	.word	0xdfffffff

08003680 <__libc_init_array>:
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	2600      	movs	r6, #0
 8003684:	4d0c      	ldr	r5, [pc, #48]	; (80036b8 <__libc_init_array+0x38>)
 8003686:	4c0d      	ldr	r4, [pc, #52]	; (80036bc <__libc_init_array+0x3c>)
 8003688:	1b64      	subs	r4, r4, r5
 800368a:	10a4      	asrs	r4, r4, #2
 800368c:	42a6      	cmp	r6, r4
 800368e:	d109      	bne.n	80036a4 <__libc_init_array+0x24>
 8003690:	2600      	movs	r6, #0
 8003692:	f000 f821 	bl	80036d8 <_init>
 8003696:	4d0a      	ldr	r5, [pc, #40]	; (80036c0 <__libc_init_array+0x40>)
 8003698:	4c0a      	ldr	r4, [pc, #40]	; (80036c4 <__libc_init_array+0x44>)
 800369a:	1b64      	subs	r4, r4, r5
 800369c:	10a4      	asrs	r4, r4, #2
 800369e:	42a6      	cmp	r6, r4
 80036a0:	d105      	bne.n	80036ae <__libc_init_array+0x2e>
 80036a2:	bd70      	pop	{r4, r5, r6, pc}
 80036a4:	00b3      	lsls	r3, r6, #2
 80036a6:	58eb      	ldr	r3, [r5, r3]
 80036a8:	4798      	blx	r3
 80036aa:	3601      	adds	r6, #1
 80036ac:	e7ee      	b.n	800368c <__libc_init_array+0xc>
 80036ae:	00b3      	lsls	r3, r6, #2
 80036b0:	58eb      	ldr	r3, [r5, r3]
 80036b2:	4798      	blx	r3
 80036b4:	3601      	adds	r6, #1
 80036b6:	e7f2      	b.n	800369e <__libc_init_array+0x1e>
 80036b8:	08005784 	.word	0x08005784
 80036bc:	08005784 	.word	0x08005784
 80036c0:	08005784 	.word	0x08005784
 80036c4:	08005788 	.word	0x08005788

080036c8 <memset>:
 80036c8:	0003      	movs	r3, r0
 80036ca:	1882      	adds	r2, r0, r2
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d100      	bne.n	80036d2 <memset+0xa>
 80036d0:	4770      	bx	lr
 80036d2:	7019      	strb	r1, [r3, #0]
 80036d4:	3301      	adds	r3, #1
 80036d6:	e7f9      	b.n	80036cc <memset+0x4>

080036d8 <_init>:
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036de:	bc08      	pop	{r3}
 80036e0:	469e      	mov	lr, r3
 80036e2:	4770      	bx	lr

080036e4 <_fini>:
 80036e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ea:	bc08      	pop	{r3}
 80036ec:	469e      	mov	lr, r3
 80036ee:	4770      	bx	lr
